// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

export class User implements flatbuffers.IUnpackableObject<UserT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): User {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsUser(bb: flatbuffers.ByteBuffer, obj?: User): User {
    return (obj || new User()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsUser(bb: flatbuffers.ByteBuffer, obj?: User): User {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new User()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  id(): string | null;
  id(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  id(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  username(): string | null;
  username(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  username(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  email(): string | null;
  email(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  email(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  createdAt(): bigint {
    const offset = this.bb!.__offset(this.bb_pos, 10);
    return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt("0");
  }

  updatedAt(): bigint {
    const offset = this.bb!.__offset(this.bb_pos, 12);
    return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt("0");
  }

  static startUser(builder: flatbuffers.Builder) {
    builder.startObject(5);
  }

  static addId(builder: flatbuffers.Builder, idOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, idOffset, 0);
  }

  static addUsername(builder: flatbuffers.Builder, usernameOffset: flatbuffers.Offset) {
    builder.addFieldOffset(1, usernameOffset, 0);
  }

  static addEmail(builder: flatbuffers.Builder, emailOffset: flatbuffers.Offset) {
    builder.addFieldOffset(2, emailOffset, 0);
  }

  static addCreatedAt(builder: flatbuffers.Builder, createdAt: bigint) {
    builder.addFieldInt64(3, createdAt, BigInt("0"));
  }

  static addUpdatedAt(builder: flatbuffers.Builder, updatedAt: bigint) {
    builder.addFieldInt64(4, updatedAt, BigInt("0"));
  }

  static endUser(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static finishUserBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {
    builder.finish(offset);
  }

  static finishSizePrefixedUserBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {
    builder.finish(offset, undefined, true);
  }

  static createUser(
    builder: flatbuffers.Builder,
    idOffset: flatbuffers.Offset,
    usernameOffset: flatbuffers.Offset,
    emailOffset: flatbuffers.Offset,
    createdAt: bigint,
    updatedAt: bigint,
  ): flatbuffers.Offset {
    User.startUser(builder);
    User.addId(builder, idOffset);
    User.addUsername(builder, usernameOffset);
    User.addEmail(builder, emailOffset);
    User.addCreatedAt(builder, createdAt);
    User.addUpdatedAt(builder, updatedAt);
    return User.endUser(builder);
  }

  unpack(): UserT {
    return new UserT(this.id(), this.username(), this.email(), this.createdAt(), this.updatedAt());
  }

  unpackTo(_o: UserT): void {
    _o.id = this.id();
    _o.username = this.username();
    _o.email = this.email();
    _o.createdAt = this.createdAt();
    _o.updatedAt = this.updatedAt();
  }
}

export class UserT implements flatbuffers.IGeneratedObject {
  constructor(
    public id: string | Uint8Array | null = null,
    public username: string | Uint8Array | null = null,
    public email: string | Uint8Array | null = null,
    public createdAt: bigint = BigInt("0"),
    public updatedAt: bigint = BigInt("0"),
  ) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const id = this.id !== null ? builder.createString(this.id!) : 0;
    const username = this.username !== null ? builder.createString(this.username!) : 0;
    const email = this.email !== null ? builder.createString(this.email!) : 0;

    return User.createUser(builder, id, username, email, this.createdAt, this.updatedAt);
  }
}
