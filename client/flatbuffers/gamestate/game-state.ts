// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Game, GameT } from '../game/game';
import { PlayerRoles, PlayerRolesT } from '../game/player-roles';


export class GameState implements flatbuffers.IUnpackableObject<GameStateT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GameState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGameState(bb:flatbuffers.ByteBuffer, obj?:GameState):GameState {
  return (obj || new GameState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGameState(bb:flatbuffers.ByteBuffer, obj?:GameState):GameState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GameState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

game(obj?:Game):Game|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Game()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

players(obj?:PlayerRoles):PlayerRoles|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new PlayerRoles()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startGameState(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addGame(builder:flatbuffers.Builder, gameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, gameOffset, 0);
}

static addPlayers(builder:flatbuffers.Builder, playersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, playersOffset, 0);
}

static endGameState(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishGameStateBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedGameStateBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}


unpack(): GameStateT {
  return new GameStateT(
    (this.game() !== null ? this.game()!.unpack() : null),
    (this.players() !== null ? this.players()!.unpack() : null)
  );
}


unpackTo(_o: GameStateT): void {
  _o.game = (this.game() !== null ? this.game()!.unpack() : null);
  _o.players = (this.players() !== null ? this.players()!.unpack() : null);
}
}

export class GameStateT implements flatbuffers.IGeneratedObject {
constructor(
  public game: GameT|null = null,
  public players: PlayerRolesT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const game = (this.game !== null ? this.game!.pack(builder) : 0);
  const players = (this.players !== null ? this.players!.pack(builder) : 0);

  GameState.startGameState(builder);
  GameState.addGame(builder, game);
  GameState.addPlayers(builder, players);

  return GameState.endGameState(builder);
}
}
