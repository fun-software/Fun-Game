// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ChatSource } from '../chat/chat-source';


export class ChatMessage implements flatbuffers.IUnpackableObject<ChatMessageT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ChatMessage {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsChatMessage(bb:flatbuffers.ByteBuffer, obj?:ChatMessage):ChatMessage {
  return (obj || new ChatMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsChatMessage(bb:flatbuffers.ByteBuffer, obj?:ChatMessage):ChatMessage {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ChatMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

source():ChatSource {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ChatSource.System;
}

message():string|null
message(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
message(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

author():string|null
author(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
author(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startChatMessage(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addSource(builder:flatbuffers.Builder, source:ChatSource) {
  builder.addFieldInt8(0, source, ChatSource.System);
}

static addMessage(builder:flatbuffers.Builder, messageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, messageOffset, 0);
}

static addAuthor(builder:flatbuffers.Builder, authorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, authorOffset, 0);
}

static endChatMessage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishChatMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedChatMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createChatMessage(builder:flatbuffers.Builder, source:ChatSource, messageOffset:flatbuffers.Offset, authorOffset:flatbuffers.Offset):flatbuffers.Offset {
  ChatMessage.startChatMessage(builder);
  ChatMessage.addSource(builder, source);
  ChatMessage.addMessage(builder, messageOffset);
  ChatMessage.addAuthor(builder, authorOffset);
  return ChatMessage.endChatMessage(builder);
}

unpack(): ChatMessageT {
  return new ChatMessageT(
    this.source(),
    this.message(),
    this.author()
  );
}


unpackTo(_o: ChatMessageT): void {
  _o.source = this.source();
  _o.message = this.message();
  _o.author = this.author();
}
}

export class ChatMessageT implements flatbuffers.IGeneratedObject {
constructor(
  public source: ChatSource = ChatSource.System,
  public message: string|Uint8Array|null = null,
  public author: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const message = (this.message !== null ? builder.createString(this.message!) : 0);
  const author = (this.author !== null ? builder.createString(this.author!) : 0);

  return ChatMessage.createChatMessage(builder,
    this.source,
    message,
    author
  );
}
}
