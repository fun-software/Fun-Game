// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { GamePhase } from '../game/game-phase';
import { PlayerRoles } from '../game/player-roles';


export class Game {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Game {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGame(bb:flatbuffers.ByteBuffer, obj?:Game):Game {
  return (obj || new Game()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGame(bb:flatbuffers.ByteBuffer, obj?:Game):Game {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Game()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

phase():GamePhase {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : GamePhase.Lobby;
}

players(obj?:PlayerRoles):PlayerRoles|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new PlayerRoles()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

starttime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

endtime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

static startGame(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addId(builder:flatbuffers.Builder, id:bigint) {
  builder.addFieldInt64(0, id, BigInt('0'));
}

static addPhase(builder:flatbuffers.Builder, phase:GamePhase) {
  builder.addFieldInt8(1, phase, GamePhase.Lobby);
}

static addPlayers(builder:flatbuffers.Builder, playersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, playersOffset, 0);
}

static addStarttime(builder:flatbuffers.Builder, starttime:bigint) {
  builder.addFieldInt64(3, starttime, BigInt('0'));
}

static addEndtime(builder:flatbuffers.Builder, endtime:bigint) {
  builder.addFieldInt64(4, endtime, BigInt('0'));
}

static endGame(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishGameBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedGameBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

}
