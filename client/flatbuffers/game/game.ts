// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { GamePhase } from '../game/game-phase';
import { PlayerRoles, PlayerRolesT } from '../game/player-roles';


export class Game implements flatbuffers.IUnpackableObject<GameT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Game {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGame(bb:flatbuffers.ByteBuffer, obj?:Game):Game {
  return (obj || new Game()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGame(bb:flatbuffers.ByteBuffer, obj?:Game):Game {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Game()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

mutate_id(value:bigint):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeUint64(this.bb_pos + offset, value);
  return true;
}

phase():GamePhase {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : GamePhase.Lobby;
}

mutate_phase(value:GamePhase):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, value);
  return true;
}

players(obj?:PlayerRoles):PlayerRoles|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new PlayerRoles()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

starttime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

mutate_starttime(value:bigint):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeUint64(this.bb_pos + offset, value);
  return true;
}

endtime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

mutate_endtime(value:bigint):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeUint64(this.bb_pos + offset, value);
  return true;
}

static startGame(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addId(builder:flatbuffers.Builder, id:bigint) {
  builder.addFieldInt64(0, id, BigInt('0'));
}

static addPhase(builder:flatbuffers.Builder, phase:GamePhase) {
  builder.addFieldInt8(1, phase, GamePhase.Lobby);
}

static addPlayers(builder:flatbuffers.Builder, playersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, playersOffset, 0);
}

static addStarttime(builder:flatbuffers.Builder, starttime:bigint) {
  builder.addFieldInt64(3, starttime, BigInt('0'));
}

static addEndtime(builder:flatbuffers.Builder, endtime:bigint) {
  builder.addFieldInt64(4, endtime, BigInt('0'));
}

static endGame(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): GameT {
  return new GameT(
    this.id(),
    this.phase(),
    (this.players() !== null ? this.players()!.unpack() : null),
    this.starttime(),
    this.endtime()
  );
}


unpackTo(_o: GameT): void {
  _o.id = this.id();
  _o.phase = this.phase();
  _o.players = (this.players() !== null ? this.players()!.unpack() : null);
  _o.starttime = this.starttime();
  _o.endtime = this.endtime();
}
}

export class GameT implements flatbuffers.IGeneratedObject {
constructor(
  public id: bigint = BigInt('0'),
  public phase: GamePhase = GamePhase.Lobby,
  public players: PlayerRolesT|null = null,
  public starttime: bigint = BigInt('0'),
  public endtime: bigint = BigInt('0')
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const players = (this.players !== null ? this.players!.pack(builder) : 0);

  Game.startGame(builder);
  Game.addId(builder, this.id);
  Game.addPhase(builder, this.phase);
  Game.addPlayers(builder, players);
  Game.addStarttime(builder, this.starttime);
  Game.addEndtime(builder, this.endtime);

  return Game.endGame(builder);
}
}
