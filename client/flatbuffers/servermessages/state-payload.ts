// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ChatMessage } from '../chat/chat-message';
import { GameState } from '../gamestate/game-state';
import { ResponseCode } from '../servermessages/response-code';


export class StatePayload {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):StatePayload {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsStatePayload(bb:flatbuffers.ByteBuffer, obj?:StatePayload):StatePayload {
  return (obj || new StatePayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsStatePayload(bb:flatbuffers.ByteBuffer, obj?:StatePayload):StatePayload {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new StatePayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

code():ResponseCode {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ResponseCode.OK;
}

gameState(obj?:GameState):GameState|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new GameState()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

chat(index: number, obj?:ChatMessage):ChatMessage|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new ChatMessage()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

chatLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startStatePayload(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addCode(builder:flatbuffers.Builder, code:ResponseCode) {
  builder.addFieldInt8(0, code, ResponseCode.OK);
}

static addGameState(builder:flatbuffers.Builder, gameStateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, gameStateOffset, 0);
}

static addChat(builder:flatbuffers.Builder, chatOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, chatOffset, 0);
}

static createChatVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startChatVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endStatePayload(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
