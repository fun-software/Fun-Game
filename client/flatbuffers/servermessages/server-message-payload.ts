// automatically generated by the FlatBuffers compiler, do not modify

import { JoinGameResponsePayload, JoinGameResponsePayloadT } from '../servermessages/join-game-response-payload';
import { NewGameResponsePayload, NewGameResponsePayloadT } from '../servermessages/new-game-response-payload';
import { StatePayload, StatePayloadT } from '../servermessages/state-payload';


export enum ServerMessagePayload {
  NONE = 0,
  NewGameResponsePayload = 1,
  JoinGameResponsePayload = 2,
  StatePayload = 3
}

export function unionToServerMessagePayload(
  type: ServerMessagePayload,
  accessor: (obj:JoinGameResponsePayload|NewGameResponsePayload|StatePayload) => JoinGameResponsePayload|NewGameResponsePayload|StatePayload|null
): JoinGameResponsePayload|NewGameResponsePayload|StatePayload|null {
  switch(ServerMessagePayload[type]) {
    case 'NONE': return null; 
    case 'NewGameResponsePayload': return accessor(new NewGameResponsePayload())! as NewGameResponsePayload;
    case 'JoinGameResponsePayload': return accessor(new JoinGameResponsePayload())! as JoinGameResponsePayload;
    case 'StatePayload': return accessor(new StatePayload())! as StatePayload;
    default: return null;
  }
}

export function unionListToServerMessagePayload(
  type: ServerMessagePayload, 
  accessor: (index: number, obj:JoinGameResponsePayload|NewGameResponsePayload|StatePayload) => JoinGameResponsePayload|NewGameResponsePayload|StatePayload|null, 
  index: number
): JoinGameResponsePayload|NewGameResponsePayload|StatePayload|null {
  switch(ServerMessagePayload[type]) {
    case 'NONE': return null; 
    case 'NewGameResponsePayload': return accessor(index, new NewGameResponsePayload())! as NewGameResponsePayload;
    case 'JoinGameResponsePayload': return accessor(index, new JoinGameResponsePayload())! as JoinGameResponsePayload;
    case 'StatePayload': return accessor(index, new StatePayload())! as StatePayload;
    default: return null;
  }
}
