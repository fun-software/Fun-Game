// automatically generated by the FlatBuffers compiler, do not modify

import {
  JoinGameResponsePayload,
  JoinGameResponsePayloadT,
} from "../servermessages/join-game-response-payload";
import {
  LeaveGameResponsePayload,
  LeaveGameResponsePayloadT,
} from "../servermessages/leave-game-response-payload";
import {
  NewGameResponsePayload,
  NewGameResponsePayloadT,
} from "../servermessages/new-game-response-payload";
import { StatePayload, StatePayloadT } from "../servermessages/state-payload";

export enum ServerMessagePayload {
  NONE = 0,
  NewGameResponsePayload = 1,
  JoinGameResponsePayload = 2,
  LeaveGameResponsePayload = 3,
  StatePayload = 4,
}

export function unionToServerMessagePayload(
  type: ServerMessagePayload,
  accessor: (
    obj: JoinGameResponsePayload | LeaveGameResponsePayload | NewGameResponsePayload | StatePayload,
  ) =>
    | JoinGameResponsePayload
    | LeaveGameResponsePayload
    | NewGameResponsePayload
    | StatePayload
    | null,
):
  | JoinGameResponsePayload
  | LeaveGameResponsePayload
  | NewGameResponsePayload
  | StatePayload
  | null {
  switch (ServerMessagePayload[type]) {
    case "NONE":
      return null;
    case "NewGameResponsePayload":
      return accessor(new NewGameResponsePayload())! as NewGameResponsePayload;
    case "JoinGameResponsePayload":
      return accessor(new JoinGameResponsePayload())! as JoinGameResponsePayload;
    case "LeaveGameResponsePayload":
      return accessor(new LeaveGameResponsePayload())! as LeaveGameResponsePayload;
    case "StatePayload":
      return accessor(new StatePayload())! as StatePayload;
    default:
      return null;
  }
}

export function unionListToServerMessagePayload(
  type: ServerMessagePayload,
  accessor: (
    index: number,
    obj: JoinGameResponsePayload | LeaveGameResponsePayload | NewGameResponsePayload | StatePayload,
  ) =>
    | JoinGameResponsePayload
    | LeaveGameResponsePayload
    | NewGameResponsePayload
    | StatePayload
    | null,
  index: number,
):
  | JoinGameResponsePayload
  | LeaveGameResponsePayload
  | NewGameResponsePayload
  | StatePayload
  | null {
  switch (ServerMessagePayload[type]) {
    case "NONE":
      return null;
    case "NewGameResponsePayload":
      return accessor(index, new NewGameResponsePayload())! as NewGameResponsePayload;
    case "JoinGameResponsePayload":
      return accessor(index, new JoinGameResponsePayload())! as JoinGameResponsePayload;
    case "LeaveGameResponsePayload":
      return accessor(index, new LeaveGameResponsePayload())! as LeaveGameResponsePayload;
    case "StatePayload":
      return accessor(index, new StatePayload())! as StatePayload;
    default:
      return null;
  }
}
