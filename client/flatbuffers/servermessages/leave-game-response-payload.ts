// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Game, GameT } from '../game/game';


export class LeaveGameResponsePayload implements flatbuffers.IUnpackableObject<LeaveGameResponsePayloadT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LeaveGameResponsePayload {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLeaveGameResponsePayload(bb:flatbuffers.ByteBuffer, obj?:LeaveGameResponsePayload):LeaveGameResponsePayload {
  return (obj || new LeaveGameResponsePayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLeaveGameResponsePayload(bb:flatbuffers.ByteBuffer, obj?:LeaveGameResponsePayload):LeaveGameResponsePayload {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LeaveGameResponsePayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

game(obj?:Game):Game|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Game()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startLeaveGameResponsePayload(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addGame(builder:flatbuffers.Builder, gameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, gameOffset, 0);
}

static endLeaveGameResponsePayload(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createLeaveGameResponsePayload(builder:flatbuffers.Builder, gameOffset:flatbuffers.Offset):flatbuffers.Offset {
  LeaveGameResponsePayload.startLeaveGameResponsePayload(builder);
  LeaveGameResponsePayload.addGame(builder, gameOffset);
  return LeaveGameResponsePayload.endLeaveGameResponsePayload(builder);
}

unpack(): LeaveGameResponsePayloadT {
  return new LeaveGameResponsePayloadT(
    (this.game() !== null ? this.game()!.unpack() : null)
  );
}


unpackTo(_o: LeaveGameResponsePayloadT): void {
  _o.game = (this.game() !== null ? this.game()!.unpack() : null);
}
}

export class LeaveGameResponsePayloadT implements flatbuffers.IGeneratedObject {
constructor(
  public game: GameT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const game = (this.game !== null ? this.game!.pack(builder) : 0);

  return LeaveGameResponsePayload.createLeaveGameResponsePayload(builder,
    game
  );
}
}
