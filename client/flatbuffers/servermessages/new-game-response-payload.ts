// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class NewGameResponsePayload implements flatbuffers.IUnpackableObject<NewGameResponsePayloadT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):NewGameResponsePayload {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsNewGameResponsePayload(bb:flatbuffers.ByteBuffer, obj?:NewGameResponsePayload):NewGameResponsePayload {
  return (obj || new NewGameResponsePayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsNewGameResponsePayload(bb:flatbuffers.ByteBuffer, obj?:NewGameResponsePayload):NewGameResponsePayload {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new NewGameResponsePayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

gameId():string|null
gameId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
gameId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startNewGameResponsePayload(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addGameId(builder:flatbuffers.Builder, gameIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, gameIdOffset, 0);
}

static endNewGameResponsePayload(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createNewGameResponsePayload(builder:flatbuffers.Builder, gameIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  NewGameResponsePayload.startNewGameResponsePayload(builder);
  NewGameResponsePayload.addGameId(builder, gameIdOffset);
  return NewGameResponsePayload.endNewGameResponsePayload(builder);
}

unpack(): NewGameResponsePayloadT {
  return new NewGameResponsePayloadT(
    this.gameId()
  );
}


unpackTo(_o: NewGameResponsePayloadT): void {
  _o.gameId = this.gameId();
}
}

export class NewGameResponsePayloadT implements flatbuffers.IGeneratedObject {
constructor(
  public gameId: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const gameId = (this.gameId !== null ? builder.createString(this.gameId!) : 0);

  return NewGameResponsePayload.createNewGameResponsePayload(builder,
    gameId
  );
}
}
