// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Game, GameT } from '../game/game';
import { ResponseCode } from '../servermessages/response-code';


export class NewGameResponsePayload implements flatbuffers.IUnpackableObject<NewGameResponsePayloadT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):NewGameResponsePayload {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsNewGameResponsePayload(bb:flatbuffers.ByteBuffer, obj?:NewGameResponsePayload):NewGameResponsePayload {
  return (obj || new NewGameResponsePayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsNewGameResponsePayload(bb:flatbuffers.ByteBuffer, obj?:NewGameResponsePayload):NewGameResponsePayload {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new NewGameResponsePayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

code():ResponseCode {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ResponseCode.OK;
}

mutate_code(value:ResponseCode):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, value);
  return true;
}

game(obj?:Game):Game|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Game()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

socketAddress():string|null
socketAddress(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
socketAddress(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startNewGameResponsePayload(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addCode(builder:flatbuffers.Builder, code:ResponseCode) {
  builder.addFieldInt8(0, code, ResponseCode.OK);
}

static addGame(builder:flatbuffers.Builder, gameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, gameOffset, 0);
}

static addSocketAddress(builder:flatbuffers.Builder, socketAddressOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, socketAddressOffset, 0);
}

static endNewGameResponsePayload(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): NewGameResponsePayloadT {
  return new NewGameResponsePayloadT(
    this.code(),
    (this.game() !== null ? this.game()!.unpack() : null),
    this.socketAddress()
  );
}


unpackTo(_o: NewGameResponsePayloadT): void {
  _o.code = this.code();
  _o.game = (this.game() !== null ? this.game()!.unpack() : null);
  _o.socketAddress = this.socketAddress();
}
}

export class NewGameResponsePayloadT implements flatbuffers.IGeneratedObject {
constructor(
  public code: ResponseCode = ResponseCode.OK,
  public game: GameT|null = null,
  public socketAddress: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const game = (this.game !== null ? this.game!.pack(builder) : 0);
  const socketAddress = (this.socketAddress !== null ? builder.createString(this.socketAddress!) : 0);

  NewGameResponsePayload.startNewGameResponsePayload(builder);
  NewGameResponsePayload.addCode(builder, this.code);
  NewGameResponsePayload.addGame(builder, game);
  NewGameResponsePayload.addSocketAddress(builder, socketAddress);

  return NewGameResponsePayload.endNewGameResponsePayload(builder);
}
}
