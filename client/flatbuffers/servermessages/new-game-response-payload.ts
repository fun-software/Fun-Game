// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { ResponseCode } from "../servermessages/response-code";

export class NewGameResponsePayload
  implements flatbuffers.IUnpackableObject<NewGameResponsePayloadT>
{
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): NewGameResponsePayload {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsNewGameResponsePayload(
    bb: flatbuffers.ByteBuffer,
    obj?: NewGameResponsePayload,
  ): NewGameResponsePayload {
    return (obj || new NewGameResponsePayload()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    );
  }

  static getSizePrefixedRootAsNewGameResponsePayload(
    bb: flatbuffers.ByteBuffer,
    obj?: NewGameResponsePayload,
  ): NewGameResponsePayload {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new NewGameResponsePayload()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    );
  }

  code(): ResponseCode {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.readInt8(this.bb_pos + offset) : ResponseCode.OK;
  }

  gameId(): string | null;
  gameId(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  gameId(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  static startNewGameResponsePayload(builder: flatbuffers.Builder) {
    builder.startObject(2);
  }

  static addCode(builder: flatbuffers.Builder, code: ResponseCode) {
    builder.addFieldInt8(0, code, ResponseCode.OK);
  }

  static addGameId(builder: flatbuffers.Builder, gameIdOffset: flatbuffers.Offset) {
    builder.addFieldOffset(1, gameIdOffset, 0);
  }

  static endNewGameResponsePayload(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createNewGameResponsePayload(
    builder: flatbuffers.Builder,
    code: ResponseCode,
    gameIdOffset: flatbuffers.Offset,
  ): flatbuffers.Offset {
    NewGameResponsePayload.startNewGameResponsePayload(builder);
    NewGameResponsePayload.addCode(builder, code);
    NewGameResponsePayload.addGameId(builder, gameIdOffset);
    return NewGameResponsePayload.endNewGameResponsePayload(builder);
  }

  unpack(): NewGameResponsePayloadT {
    return new NewGameResponsePayloadT(this.code(), this.gameId());
  }

  unpackTo(_o: NewGameResponsePayloadT): void {
    _o.code = this.code();
    _o.gameId = this.gameId();
  }
}

export class NewGameResponsePayloadT implements flatbuffers.IGeneratedObject {
  constructor(
    public code: ResponseCode = ResponseCode.OK,
    public gameId: string | Uint8Array | null = null,
  ) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const gameId = this.gameId !== null ? builder.createString(this.gameId!) : 0;

    return NewGameResponsePayload.createNewGameResponsePayload(builder, this.code, gameId);
  }
}
