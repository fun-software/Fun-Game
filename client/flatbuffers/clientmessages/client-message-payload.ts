// automatically generated by the FlatBuffers compiler, do not modify

import { ChatPayload, ChatPayloadT } from "../clientmessages/chat-payload";
import { InputPayload, InputPayloadT } from "../clientmessages/input-payload";
import { JoinGamePayload, JoinGamePayloadT } from "../clientmessages/join-game-payload";
import { LeaveGamePayload, LeaveGamePayloadT } from "../clientmessages/leave-game-payload";
import { NewGamePayload, NewGamePayloadT } from "../clientmessages/new-game-payload";
import { QueryStatePayload, QueryStatePayloadT } from "../clientmessages/query-state-payload";

export enum ClientMessagePayload {
  NONE = 0,
  ChatPayload = 1,
  InputPayload = 2,
  JoinGamePayload = 3,
  LeaveGamePayload = 4,
  NewGamePayload = 5,
  QueryStatePayload = 6,
}

export function unionToClientMessagePayload(
  type: ClientMessagePayload,
  accessor: (
    obj:
      | ChatPayload
      | InputPayload
      | JoinGamePayload
      | LeaveGamePayload
      | NewGamePayload
      | QueryStatePayload,
  ) =>
    | ChatPayload
    | InputPayload
    | JoinGamePayload
    | LeaveGamePayload
    | NewGamePayload
    | QueryStatePayload
    | null,
):
  | ChatPayload
  | InputPayload
  | JoinGamePayload
  | LeaveGamePayload
  | NewGamePayload
  | QueryStatePayload
  | null {
  switch (ClientMessagePayload[type]) {
    case "NONE":
      return null;
    case "ChatPayload":
      return accessor(new ChatPayload())! as ChatPayload;
    case "InputPayload":
      return accessor(new InputPayload())! as InputPayload;
    case "JoinGamePayload":
      return accessor(new JoinGamePayload())! as JoinGamePayload;
    case "LeaveGamePayload":
      return accessor(new LeaveGamePayload())! as LeaveGamePayload;
    case "NewGamePayload":
      return accessor(new NewGamePayload())! as NewGamePayload;
    case "QueryStatePayload":
      return accessor(new QueryStatePayload())! as QueryStatePayload;
    default:
      return null;
  }
}

export function unionListToClientMessagePayload(
  type: ClientMessagePayload,
  accessor: (
    index: number,
    obj:
      | ChatPayload
      | InputPayload
      | JoinGamePayload
      | LeaveGamePayload
      | NewGamePayload
      | QueryStatePayload,
  ) =>
    | ChatPayload
    | InputPayload
    | JoinGamePayload
    | LeaveGamePayload
    | NewGamePayload
    | QueryStatePayload
    | null,
  index: number,
):
  | ChatPayload
  | InputPayload
  | JoinGamePayload
  | LeaveGamePayload
  | NewGamePayload
  | QueryStatePayload
  | null {
  switch (ClientMessagePayload[type]) {
    case "NONE":
      return null;
    case "ChatPayload":
      return accessor(index, new ChatPayload())! as ChatPayload;
    case "InputPayload":
      return accessor(index, new InputPayload())! as InputPayload;
    case "JoinGamePayload":
      return accessor(index, new JoinGamePayload())! as JoinGamePayload;
    case "LeaveGamePayload":
      return accessor(index, new LeaveGamePayload())! as LeaveGamePayload;
    case "NewGamePayload":
      return accessor(index, new NewGamePayload())! as NewGamePayload;
    case "QueryStatePayload":
      return accessor(index, new QueryStatePayload())! as QueryStatePayload;
    default:
      return null;
  }
}
