// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { Player, PlayerT } from "../player/player";
import { User, UserT } from "../user/user";

export class InputPayload implements flatbuffers.IUnpackableObject<InputPayloadT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): InputPayload {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsInputPayload(bb: flatbuffers.ByteBuffer, obj?: InputPayload): InputPayload {
    return (obj || new InputPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsInputPayload(
    bb: flatbuffers.ByteBuffer,
    obj?: InputPayload,
  ): InputPayload {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new InputPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  user(obj?: User): User | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? (obj || new User()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!)
      : null;
  }

  player(obj?: Player): Player | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset
      ? (obj || new Player()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!)
      : null;
  }

  static startInputPayload(builder: flatbuffers.Builder) {
    builder.startObject(2);
  }

  static addUser(builder: flatbuffers.Builder, userOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, userOffset, 0);
  }

  static addPlayer(builder: flatbuffers.Builder, playerOffset: flatbuffers.Offset) {
    builder.addFieldOffset(1, playerOffset, 0);
  }

  static endInputPayload(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  unpack(): InputPayloadT {
    return new InputPayloadT(
      this.user() !== null ? this.user()!.unpack() : null,
      this.player() !== null ? this.player()!.unpack() : null,
    );
  }

  unpackTo(_o: InputPayloadT): void {
    _o.user = this.user() !== null ? this.user()!.unpack() : null;
    _o.player = this.player() !== null ? this.player()!.unpack() : null;
  }
}

export class InputPayloadT implements flatbuffers.IGeneratedObject {
  constructor(public user: UserT | null = null, public player: PlayerT | null = null) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const user = this.user !== null ? this.user!.pack(builder) : 0;
    const player = this.player !== null ? this.player!.pack(builder) : 0;

    InputPayload.startInputPayload(builder);
    InputPayload.addUser(builder, user);
    InputPayload.addPlayer(builder, player);

    return InputPayload.endInputPayload(builder);
  }
}
