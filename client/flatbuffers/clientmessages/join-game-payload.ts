// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { User, UserT } from '../user/user';


export class JoinGamePayload implements flatbuffers.IUnpackableObject<JoinGamePayloadT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):JoinGamePayload {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsJoinGamePayload(bb:flatbuffers.ByteBuffer, obj?:JoinGamePayload):JoinGamePayload {
  return (obj || new JoinGamePayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsJoinGamePayload(bb:flatbuffers.ByteBuffer, obj?:JoinGamePayload):JoinGamePayload {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new JoinGamePayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

user(obj?:User):User|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new User()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

gameId():string|null
gameId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
gameId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startJoinGamePayload(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addUser(builder:flatbuffers.Builder, userOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, userOffset, 0);
}

static addGameId(builder:flatbuffers.Builder, gameIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, gameIdOffset, 0);
}

static endJoinGamePayload(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createJoinGamePayload(builder:flatbuffers.Builder, userOffset:flatbuffers.Offset, gameIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  JoinGamePayload.startJoinGamePayload(builder);
  JoinGamePayload.addUser(builder, userOffset);
  JoinGamePayload.addGameId(builder, gameIdOffset);
  return JoinGamePayload.endJoinGamePayload(builder);
}

unpack(): JoinGamePayloadT {
  return new JoinGamePayloadT(
    (this.user() !== null ? this.user()!.unpack() : null),
    this.gameId()
  );
}


unpackTo(_o: JoinGamePayloadT): void {
  _o.user = (this.user() !== null ? this.user()!.unpack() : null);
  _o.gameId = this.gameId();
}
}

export class JoinGamePayloadT implements flatbuffers.IGeneratedObject {
constructor(
  public user: UserT|null = null,
  public gameId: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const user = (this.user !== null ? this.user!.pack(builder) : 0);
  const gameId = (this.gameId !== null ? builder.createString(this.gameId!) : 0);

  return JoinGamePayload.createJoinGamePayload(builder,
    user,
    gameId
  );
}
}
