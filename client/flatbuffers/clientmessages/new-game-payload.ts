// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { User, UserT } from "../user/user";

export class NewGamePayload implements flatbuffers.IUnpackableObject<NewGamePayloadT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): NewGamePayload {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsNewGamePayload(bb: flatbuffers.ByteBuffer, obj?: NewGamePayload): NewGamePayload {
    return (obj || new NewGamePayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsNewGamePayload(
    bb: flatbuffers.ByteBuffer,
    obj?: NewGamePayload,
  ): NewGamePayload {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new NewGamePayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  user(obj?: User): User | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? (obj || new User()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!)
      : null;
  }

  static startNewGamePayload(builder: flatbuffers.Builder) {
    builder.startObject(1);
  }

  static addUser(builder: flatbuffers.Builder, userOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, userOffset, 0);
  }

  static endNewGamePayload(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createNewGamePayload(
    builder: flatbuffers.Builder,
    userOffset: flatbuffers.Offset,
  ): flatbuffers.Offset {
    NewGamePayload.startNewGamePayload(builder);
    NewGamePayload.addUser(builder, userOffset);
    return NewGamePayload.endNewGamePayload(builder);
  }

  unpack(): NewGamePayloadT {
    return new NewGamePayloadT(this.user() !== null ? this.user()!.unpack() : null);
  }

  unpackTo(_o: NewGamePayloadT): void {
    _o.user = this.user() !== null ? this.user()!.unpack() : null;
  }
}

export class NewGamePayloadT implements flatbuffers.IGeneratedObject {
  constructor(public user: UserT | null = null) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const user = this.user !== null ? this.user!.pack(builder) : 0;

    return NewGamePayload.createNewGamePayload(builder, user);
  }
}
