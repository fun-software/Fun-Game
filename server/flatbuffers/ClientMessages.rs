// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod user {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum UserOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct User<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for User<'a> {
  type Inner = User<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> User<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_USERNAME: flatbuffers::VOffsetT = 6;
  pub const VT_EMAIL: flatbuffers::VOffsetT = 8;
  pub const VT_CREATED_AT: flatbuffers::VOffsetT = 10;
  pub const VT_UPDATED_AT: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    User { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args UserArgs<'args>
  ) -> flatbuffers::WIPOffset<User<'bldr>> {
    let mut builder = UserBuilder::new(_fbb);
    builder.add_updated_at(args.updated_at);
    builder.add_created_at(args.created_at);
    builder.add_id(args.id);
    if let Some(x) = args.email { builder.add_email(x); }
    if let Some(x) = args.username { builder.add_username(x); }
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(User::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn username(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(User::VT_USERNAME, None)}
  }
  #[inline]
  pub fn email(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(User::VT_EMAIL, None)}
  }
  #[inline]
  pub fn created_at(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(User::VT_CREATED_AT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn updated_at(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(User::VT_UPDATED_AT, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for User<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("username", Self::VT_USERNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("email", Self::VT_EMAIL, false)?
     .visit_field::<u64>("created_at", Self::VT_CREATED_AT, false)?
     .visit_field::<u64>("updated_at", Self::VT_UPDATED_AT, false)?
     .finish();
    Ok(())
  }
}
pub struct UserArgs<'a> {
    pub id: u64,
    pub username: Option<flatbuffers::WIPOffset<&'a str>>,
    pub email: Option<flatbuffers::WIPOffset<&'a str>>,
    pub created_at: u64,
    pub updated_at: u64,
}
impl<'a> Default for UserArgs<'a> {
  #[inline]
  fn default() -> Self {
    UserArgs {
      id: 0,
      username: None,
      email: None,
      created_at: 0,
      updated_at: 0,
    }
  }
}

pub struct UserBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> UserBuilder<'a, 'b> {
  #[inline]
  pub fn add_id(&mut self, id: u64) {
    self.fbb_.push_slot::<u64>(User::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_username(&mut self, username: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(User::VT_USERNAME, username);
  }
  #[inline]
  pub fn add_email(&mut self, email: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(User::VT_EMAIL, email);
  }
  #[inline]
  pub fn add_created_at(&mut self, created_at: u64) {
    self.fbb_.push_slot::<u64>(User::VT_CREATED_AT, created_at, 0);
  }
  #[inline]
  pub fn add_updated_at(&mut self, updated_at: u64) {
    self.fbb_.push_slot::<u64>(User::VT_UPDATED_AT, updated_at, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> UserBuilder<'a, 'b> {
    let start = _fbb.start_table();
    UserBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<User<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for User<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("User");
      ds.field("id", &self.id());
      ds.field("username", &self.username());
      ds.field("email", &self.email());
      ds.field("created_at", &self.created_at());
      ds.field("updated_at", &self.updated_at());
      ds.finish()
  }
}
}  // pub mod User

#[allow(unused_imports, dead_code)]
pub mod math {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

// struct Vec3, aligned to 4
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct Vec3(pub [u8; 12]);
impl Default for Vec3 { 
  fn default() -> Self { 
    Self([0; 12])
  }
}
impl core::fmt::Debug for Vec3 {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("Vec3")
      .field("x", &self.x())
      .field("y", &self.y())
      .field("z", &self.z())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Vec3 {}
impl<'a> flatbuffers::Follow<'a> for Vec3 {
  type Inner = &'a Vec3;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Vec3>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Vec3 {
  type Inner = &'a Vec3;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Vec3>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Vec3 {
    type Output = Vec3;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const Vec3 as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for Vec3 {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> Vec3 {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    x: f32,
    y: f32,
    z: f32,
  ) -> Self {
    let mut s = Self([0; 12]);
    s.set_x(x);
    s.set_y(y);
    s.set_z(z);
    s
  }

  pub fn x(&self) -> f32 {
    let mut mem = core::mem::MaybeUninit::<<f32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_x(&mut self, x: f32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn y(&self) -> f32 {
    let mut mem = core::mem::MaybeUninit::<<f32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[4..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_y(&mut self, x: f32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[4..].as_mut_ptr(),
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn z(&self) -> f32 {
    let mut mem = core::mem::MaybeUninit::<<f32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[8..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_z(&mut self, x: f32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[8..].as_mut_ptr(),
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
    }
  }

}

}  // pub mod Math

#[allow(unused_imports, dead_code)]
pub mod player {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum PlayerOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Player<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Player<'a> {
  type Inner = Player<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Player<'a> {
  pub const VT_POSITION: flatbuffers::VOffsetT = 4;
  pub const VT_VELOCITY: flatbuffers::VOffsetT = 6;
  pub const VT_LOOK_DIRECTION: flatbuffers::VOffsetT = 8;
  pub const VT_HP: flatbuffers::VOffsetT = 10;
  pub const VT_SPEED: flatbuffers::VOffsetT = 12;
  pub const VT_SPRINTING: flatbuffers::VOffsetT = 14;
  pub const VT_SNEAKING: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Player { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args PlayerArgs<'args>
  ) -> flatbuffers::WIPOffset<Player<'bldr>> {
    let mut builder = PlayerBuilder::new(_fbb);
    if let Some(x) = args.look_direction { builder.add_look_direction(x); }
    if let Some(x) = args.velocity { builder.add_velocity(x); }
    if let Some(x) = args.position { builder.add_position(x); }
    builder.add_sneaking(args.sneaking);
    builder.add_sprinting(args.sprinting);
    builder.add_speed(args.speed);
    builder.add_hp(args.hp);
    builder.finish()
  }


  #[inline]
  pub fn position(&self) -> Option<&'a super::math::Vec3> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<super::math::Vec3>(Player::VT_POSITION, None)}
  }
  #[inline]
  pub fn velocity(&self) -> Option<&'a super::math::Vec3> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<super::math::Vec3>(Player::VT_VELOCITY, None)}
  }
  #[inline]
  pub fn look_direction(&self) -> Option<&'a super::math::Vec3> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<super::math::Vec3>(Player::VT_LOOK_DIRECTION, None)}
  }
  #[inline]
  pub fn hp(&self) -> i8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i8>(Player::VT_HP, Some(100)).unwrap()}
  }
  #[inline]
  pub fn speed(&self) -> i8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i8>(Player::VT_SPEED, Some(100)).unwrap()}
  }
  #[inline]
  pub fn sprinting(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(Player::VT_SPRINTING, Some(false)).unwrap()}
  }
  #[inline]
  pub fn sneaking(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(Player::VT_SNEAKING, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Player<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<super::math::Vec3>("position", Self::VT_POSITION, false)?
     .visit_field::<super::math::Vec3>("velocity", Self::VT_VELOCITY, false)?
     .visit_field::<super::math::Vec3>("look_direction", Self::VT_LOOK_DIRECTION, false)?
     .visit_field::<i8>("hp", Self::VT_HP, false)?
     .visit_field::<i8>("speed", Self::VT_SPEED, false)?
     .visit_field::<bool>("sprinting", Self::VT_SPRINTING, false)?
     .visit_field::<bool>("sneaking", Self::VT_SNEAKING, false)?
     .finish();
    Ok(())
  }
}
pub struct PlayerArgs<'a> {
    pub position: Option<&'a super::math::Vec3>,
    pub velocity: Option<&'a super::math::Vec3>,
    pub look_direction: Option<&'a super::math::Vec3>,
    pub hp: i8,
    pub speed: i8,
    pub sprinting: bool,
    pub sneaking: bool,
}
impl<'a> Default for PlayerArgs<'a> {
  #[inline]
  fn default() -> Self {
    PlayerArgs {
      position: None,
      velocity: None,
      look_direction: None,
      hp: 100,
      speed: 100,
      sprinting: false,
      sneaking: false,
    }
  }
}

pub struct PlayerBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> PlayerBuilder<'a, 'b> {
  #[inline]
  pub fn add_position(&mut self, position: &super::math::Vec3) {
    self.fbb_.push_slot_always::<&super::math::Vec3>(Player::VT_POSITION, position);
  }
  #[inline]
  pub fn add_velocity(&mut self, velocity: &super::math::Vec3) {
    self.fbb_.push_slot_always::<&super::math::Vec3>(Player::VT_VELOCITY, velocity);
  }
  #[inline]
  pub fn add_look_direction(&mut self, look_direction: &super::math::Vec3) {
    self.fbb_.push_slot_always::<&super::math::Vec3>(Player::VT_LOOK_DIRECTION, look_direction);
  }
  #[inline]
  pub fn add_hp(&mut self, hp: i8) {
    self.fbb_.push_slot::<i8>(Player::VT_HP, hp, 100);
  }
  #[inline]
  pub fn add_speed(&mut self, speed: i8) {
    self.fbb_.push_slot::<i8>(Player::VT_SPEED, speed, 100);
  }
  #[inline]
  pub fn add_sprinting(&mut self, sprinting: bool) {
    self.fbb_.push_slot::<bool>(Player::VT_SPRINTING, sprinting, false);
  }
  #[inline]
  pub fn add_sneaking(&mut self, sneaking: bool) {
    self.fbb_.push_slot::<bool>(Player::VT_SNEAKING, sneaking, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> PlayerBuilder<'a, 'b> {
    let start = _fbb.start_table();
    PlayerBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Player<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Player<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Player");
      ds.field("position", &self.position());
      ds.field("velocity", &self.velocity());
      ds.field("look_direction", &self.look_direction());
      ds.field("hp", &self.hp());
      ds.field("speed", &self.speed());
      ds.field("sprinting", &self.sprinting());
      ds.field("sneaking", &self.sneaking());
      ds.finish()
  }
}
}  // pub mod Player

#[allow(unused_imports, dead_code)]
pub mod chat {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_CHAT_SOURCE: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_CHAT_SOURCE: i8 = 1;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_CHAT_SOURCE: [ChatSource; 2] = [
  ChatSource::System,
  ChatSource::Player,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct ChatSource(pub i8);
#[allow(non_upper_case_globals)]
impl ChatSource {
  pub const System: Self = Self(0);
  pub const Player: Self = Self(1);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 1;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::System,
    Self::Player,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::System => Some("System"),
      Self::Player => Some("Player"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for ChatSource {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for ChatSource {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for ChatSource {
    type Output = ChatSource;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for ChatSource {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for ChatSource {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for ChatSource {}
pub enum ChatMessageOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ChatMessage<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ChatMessage<'a> {
  type Inner = ChatMessage<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ChatMessage<'a> {
  pub const VT_SOURCE: flatbuffers::VOffsetT = 4;
  pub const VT_MESSAGE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ChatMessage { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ChatMessageArgs<'args>
  ) -> flatbuffers::WIPOffset<ChatMessage<'bldr>> {
    let mut builder = ChatMessageBuilder::new(_fbb);
    if let Some(x) = args.message { builder.add_message(x); }
    builder.add_source(args.source);
    builder.finish()
  }


  #[inline]
  pub fn source(&self) -> ChatSource {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ChatSource>(ChatMessage::VT_SOURCE, Some(ChatSource::System)).unwrap()}
  }
  #[inline]
  pub fn message(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ChatMessage::VT_MESSAGE, None)}
  }
}

impl flatbuffers::Verifiable for ChatMessage<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<ChatSource>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("message", Self::VT_MESSAGE, false)?
     .finish();
    Ok(())
  }
}
pub struct ChatMessageArgs<'a> {
    pub source: ChatSource,
    pub message: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for ChatMessageArgs<'a> {
  #[inline]
  fn default() -> Self {
    ChatMessageArgs {
      source: ChatSource::System,
      message: None,
    }
  }
}

pub struct ChatMessageBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ChatMessageBuilder<'a, 'b> {
  #[inline]
  pub fn add_source(&mut self, source: ChatSource) {
    self.fbb_.push_slot::<ChatSource>(ChatMessage::VT_SOURCE, source, ChatSource::System);
  }
  #[inline]
  pub fn add_message(&mut self, message: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ChatMessage::VT_MESSAGE, message);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ChatMessageBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ChatMessageBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ChatMessage<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ChatMessage<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ChatMessage");
      ds.field("source", &self.source());
      ds.field("message", &self.message());
      ds.finish()
  }
}
}  // pub mod Chat

#[allow(unused_imports, dead_code)]
pub mod client_messages {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_CLIENT_MESSAGE_PAYLOAD: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_CLIENT_MESSAGE_PAYLOAD: u8 = 6;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_CLIENT_MESSAGE_PAYLOAD: [ClientMessagePayload; 7] = [
  ClientMessagePayload::NONE,
  ClientMessagePayload::ChatPayload,
  ClientMessagePayload::InputPayload,
  ClientMessagePayload::JoinGamePayload,
  ClientMessagePayload::LeaveGamePayload,
  ClientMessagePayload::NewGamePayload,
  ClientMessagePayload::QueryStatePayload,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct ClientMessagePayload(pub u8);
#[allow(non_upper_case_globals)]
impl ClientMessagePayload {
  pub const NONE: Self = Self(0);
  pub const ChatPayload: Self = Self(1);
  pub const InputPayload: Self = Self(2);
  pub const JoinGamePayload: Self = Self(3);
  pub const LeaveGamePayload: Self = Self(4);
  pub const NewGamePayload: Self = Self(5);
  pub const QueryStatePayload: Self = Self(6);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 6;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::NONE,
    Self::ChatPayload,
    Self::InputPayload,
    Self::JoinGamePayload,
    Self::LeaveGamePayload,
    Self::NewGamePayload,
    Self::QueryStatePayload,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::NONE => Some("NONE"),
      Self::ChatPayload => Some("ChatPayload"),
      Self::InputPayload => Some("InputPayload"),
      Self::JoinGamePayload => Some("JoinGamePayload"),
      Self::LeaveGamePayload => Some("LeaveGamePayload"),
      Self::NewGamePayload => Some("NewGamePayload"),
      Self::QueryStatePayload => Some("QueryStatePayload"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for ClientMessagePayload {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for ClientMessagePayload {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<u8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for ClientMessagePayload {
    type Output = ClientMessagePayload;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<u8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for ClientMessagePayload {
  type Scalar = u8;
  #[inline]
  fn to_little_endian(self) -> u8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: u8) -> Self {
    let b = u8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for ClientMessagePayload {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for ClientMessagePayload {}
pub struct ClientMessagePayloadUnionTableOffset {}

pub enum NewGamePayloadOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct NewGamePayload<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for NewGamePayload<'a> {
  type Inner = NewGamePayload<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> NewGamePayload<'a> {
  pub const VT_USER: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    NewGamePayload { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args NewGamePayloadArgs<'args>
  ) -> flatbuffers::WIPOffset<NewGamePayload<'bldr>> {
    let mut builder = NewGamePayloadBuilder::new(_fbb);
    if let Some(x) = args.user { builder.add_user(x); }
    builder.finish()
  }


  #[inline]
  pub fn user(&self) -> Option<super::user::User<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::user::User>>(NewGamePayload::VT_USER, None)}
  }
}

impl flatbuffers::Verifiable for NewGamePayload<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::user::User>>("user", Self::VT_USER, false)?
     .finish();
    Ok(())
  }
}
pub struct NewGamePayloadArgs<'a> {
    pub user: Option<flatbuffers::WIPOffset<super::user::User<'a>>>,
}
impl<'a> Default for NewGamePayloadArgs<'a> {
  #[inline]
  fn default() -> Self {
    NewGamePayloadArgs {
      user: None,
    }
  }
}

pub struct NewGamePayloadBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> NewGamePayloadBuilder<'a, 'b> {
  #[inline]
  pub fn add_user(&mut self, user: flatbuffers::WIPOffset<super::user::User<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::user::User>>(NewGamePayload::VT_USER, user);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> NewGamePayloadBuilder<'a, 'b> {
    let start = _fbb.start_table();
    NewGamePayloadBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<NewGamePayload<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for NewGamePayload<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("NewGamePayload");
      ds.field("user", &self.user());
      ds.finish()
  }
}
pub enum JoinGamePayloadOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct JoinGamePayload<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for JoinGamePayload<'a> {
  type Inner = JoinGamePayload<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> JoinGamePayload<'a> {
  pub const VT_USER: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    JoinGamePayload { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args JoinGamePayloadArgs<'args>
  ) -> flatbuffers::WIPOffset<JoinGamePayload<'bldr>> {
    let mut builder = JoinGamePayloadBuilder::new(_fbb);
    if let Some(x) = args.user { builder.add_user(x); }
    builder.finish()
  }


  #[inline]
  pub fn user(&self) -> Option<super::user::User<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::user::User>>(JoinGamePayload::VT_USER, None)}
  }
}

impl flatbuffers::Verifiable for JoinGamePayload<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::user::User>>("user", Self::VT_USER, false)?
     .finish();
    Ok(())
  }
}
pub struct JoinGamePayloadArgs<'a> {
    pub user: Option<flatbuffers::WIPOffset<super::user::User<'a>>>,
}
impl<'a> Default for JoinGamePayloadArgs<'a> {
  #[inline]
  fn default() -> Self {
    JoinGamePayloadArgs {
      user: None,
    }
  }
}

pub struct JoinGamePayloadBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> JoinGamePayloadBuilder<'a, 'b> {
  #[inline]
  pub fn add_user(&mut self, user: flatbuffers::WIPOffset<super::user::User<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::user::User>>(JoinGamePayload::VT_USER, user);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> JoinGamePayloadBuilder<'a, 'b> {
    let start = _fbb.start_table();
    JoinGamePayloadBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<JoinGamePayload<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for JoinGamePayload<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("JoinGamePayload");
      ds.field("user", &self.user());
      ds.finish()
  }
}
pub enum LeaveGamePayloadOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct LeaveGamePayload<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for LeaveGamePayload<'a> {
  type Inner = LeaveGamePayload<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> LeaveGamePayload<'a> {
  pub const VT_USER: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    LeaveGamePayload { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args LeaveGamePayloadArgs<'args>
  ) -> flatbuffers::WIPOffset<LeaveGamePayload<'bldr>> {
    let mut builder = LeaveGamePayloadBuilder::new(_fbb);
    if let Some(x) = args.user { builder.add_user(x); }
    builder.finish()
  }


  #[inline]
  pub fn user(&self) -> Option<super::user::User<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::user::User>>(LeaveGamePayload::VT_USER, None)}
  }
}

impl flatbuffers::Verifiable for LeaveGamePayload<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::user::User>>("user", Self::VT_USER, false)?
     .finish();
    Ok(())
  }
}
pub struct LeaveGamePayloadArgs<'a> {
    pub user: Option<flatbuffers::WIPOffset<super::user::User<'a>>>,
}
impl<'a> Default for LeaveGamePayloadArgs<'a> {
  #[inline]
  fn default() -> Self {
    LeaveGamePayloadArgs {
      user: None,
    }
  }
}

pub struct LeaveGamePayloadBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> LeaveGamePayloadBuilder<'a, 'b> {
  #[inline]
  pub fn add_user(&mut self, user: flatbuffers::WIPOffset<super::user::User<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::user::User>>(LeaveGamePayload::VT_USER, user);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> LeaveGamePayloadBuilder<'a, 'b> {
    let start = _fbb.start_table();
    LeaveGamePayloadBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<LeaveGamePayload<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for LeaveGamePayload<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("LeaveGamePayload");
      ds.field("user", &self.user());
      ds.finish()
  }
}
pub enum ChatPayloadOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ChatPayload<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ChatPayload<'a> {
  type Inner = ChatPayload<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ChatPayload<'a> {
  pub const VT_USER: flatbuffers::VOffsetT = 4;
  pub const VT_MESSAGE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ChatPayload { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ChatPayloadArgs<'args>
  ) -> flatbuffers::WIPOffset<ChatPayload<'bldr>> {
    let mut builder = ChatPayloadBuilder::new(_fbb);
    if let Some(x) = args.message { builder.add_message(x); }
    if let Some(x) = args.user { builder.add_user(x); }
    builder.finish()
  }


  #[inline]
  pub fn user(&self) -> Option<super::user::User<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::user::User>>(ChatPayload::VT_USER, None)}
  }
  #[inline]
  pub fn message(&self) -> Option<super::chat::ChatMessage<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::chat::ChatMessage>>(ChatPayload::VT_MESSAGE, None)}
  }
}

impl flatbuffers::Verifiable for ChatPayload<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::user::User>>("user", Self::VT_USER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::chat::ChatMessage>>("message", Self::VT_MESSAGE, false)?
     .finish();
    Ok(())
  }
}
pub struct ChatPayloadArgs<'a> {
    pub user: Option<flatbuffers::WIPOffset<super::user::User<'a>>>,
    pub message: Option<flatbuffers::WIPOffset<super::chat::ChatMessage<'a>>>,
}
impl<'a> Default for ChatPayloadArgs<'a> {
  #[inline]
  fn default() -> Self {
    ChatPayloadArgs {
      user: None,
      message: None,
    }
  }
}

pub struct ChatPayloadBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ChatPayloadBuilder<'a, 'b> {
  #[inline]
  pub fn add_user(&mut self, user: flatbuffers::WIPOffset<super::user::User<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::user::User>>(ChatPayload::VT_USER, user);
  }
  #[inline]
  pub fn add_message(&mut self, message: flatbuffers::WIPOffset<super::chat::ChatMessage<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::chat::ChatMessage>>(ChatPayload::VT_MESSAGE, message);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ChatPayloadBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ChatPayloadBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ChatPayload<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ChatPayload<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ChatPayload");
      ds.field("user", &self.user());
      ds.field("message", &self.message());
      ds.finish()
  }
}
pub enum InputPayloadOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct InputPayload<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for InputPayload<'a> {
  type Inner = InputPayload<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> InputPayload<'a> {
  pub const VT_USER: flatbuffers::VOffsetT = 4;
  pub const VT_PLAYER: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    InputPayload { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args InputPayloadArgs<'args>
  ) -> flatbuffers::WIPOffset<InputPayload<'bldr>> {
    let mut builder = InputPayloadBuilder::new(_fbb);
    if let Some(x) = args.player { builder.add_player(x); }
    if let Some(x) = args.user { builder.add_user(x); }
    builder.finish()
  }


  #[inline]
  pub fn user(&self) -> Option<super::user::User<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::user::User>>(InputPayload::VT_USER, None)}
  }
  #[inline]
  pub fn player(&self) -> Option<super::player::Player<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::player::Player>>(InputPayload::VT_PLAYER, None)}
  }
}

impl flatbuffers::Verifiable for InputPayload<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::user::User>>("user", Self::VT_USER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::player::Player>>("player", Self::VT_PLAYER, false)?
     .finish();
    Ok(())
  }
}
pub struct InputPayloadArgs<'a> {
    pub user: Option<flatbuffers::WIPOffset<super::user::User<'a>>>,
    pub player: Option<flatbuffers::WIPOffset<super::player::Player<'a>>>,
}
impl<'a> Default for InputPayloadArgs<'a> {
  #[inline]
  fn default() -> Self {
    InputPayloadArgs {
      user: None,
      player: None,
    }
  }
}

pub struct InputPayloadBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> InputPayloadBuilder<'a, 'b> {
  #[inline]
  pub fn add_user(&mut self, user: flatbuffers::WIPOffset<super::user::User<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::user::User>>(InputPayload::VT_USER, user);
  }
  #[inline]
  pub fn add_player(&mut self, player: flatbuffers::WIPOffset<super::player::Player<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::player::Player>>(InputPayload::VT_PLAYER, player);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> InputPayloadBuilder<'a, 'b> {
    let start = _fbb.start_table();
    InputPayloadBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<InputPayload<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for InputPayload<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("InputPayload");
      ds.field("user", &self.user());
      ds.field("player", &self.player());
      ds.finish()
  }
}
pub enum QueryStatePayloadOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct QueryStatePayload<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for QueryStatePayload<'a> {
  type Inner = QueryStatePayload<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> QueryStatePayload<'a> {
  pub const VT_USER: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    QueryStatePayload { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args QueryStatePayloadArgs<'args>
  ) -> flatbuffers::WIPOffset<QueryStatePayload<'bldr>> {
    let mut builder = QueryStatePayloadBuilder::new(_fbb);
    if let Some(x) = args.user { builder.add_user(x); }
    builder.finish()
  }


  #[inline]
  pub fn user(&self) -> Option<super::user::User<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::user::User>>(QueryStatePayload::VT_USER, None)}
  }
}

impl flatbuffers::Verifiable for QueryStatePayload<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::user::User>>("user", Self::VT_USER, false)?
     .finish();
    Ok(())
  }
}
pub struct QueryStatePayloadArgs<'a> {
    pub user: Option<flatbuffers::WIPOffset<super::user::User<'a>>>,
}
impl<'a> Default for QueryStatePayloadArgs<'a> {
  #[inline]
  fn default() -> Self {
    QueryStatePayloadArgs {
      user: None,
    }
  }
}

pub struct QueryStatePayloadBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> QueryStatePayloadBuilder<'a, 'b> {
  #[inline]
  pub fn add_user(&mut self, user: flatbuffers::WIPOffset<super::user::User<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::user::User>>(QueryStatePayload::VT_USER, user);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> QueryStatePayloadBuilder<'a, 'b> {
    let start = _fbb.start_table();
    QueryStatePayloadBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<QueryStatePayload<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for QueryStatePayload<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("QueryStatePayload");
      ds.field("user", &self.user());
      ds.finish()
  }
}
pub enum ClientMessageOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ClientMessage<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ClientMessage<'a> {
  type Inner = ClientMessage<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ClientMessage<'a> {
  pub const VT_TIMESTAMP: flatbuffers::VOffsetT = 4;
  pub const VT_PAYLOAD_TYPE: flatbuffers::VOffsetT = 6;
  pub const VT_PAYLOAD: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ClientMessage { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ClientMessageArgs
  ) -> flatbuffers::WIPOffset<ClientMessage<'bldr>> {
    let mut builder = ClientMessageBuilder::new(_fbb);
    builder.add_timestamp(args.timestamp);
    if let Some(x) = args.payload { builder.add_payload(x); }
    builder.add_payload_type(args.payload_type);
    builder.finish()
  }


  #[inline]
  pub fn timestamp(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(ClientMessage::VT_TIMESTAMP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn payload_type(&self) -> ClientMessagePayload {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ClientMessagePayload>(ClientMessage::VT_PAYLOAD_TYPE, Some(ClientMessagePayload::NONE)).unwrap()}
  }
  #[inline]
  pub fn payload(&self) -> Option<flatbuffers::Table<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(ClientMessage::VT_PAYLOAD, None)}
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn payload_as_chat_payload(&self) -> Option<ChatPayload<'a>> {
    if self.payload_type() == ClientMessagePayload::ChatPayload {
      self.payload().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { ChatPayload::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn payload_as_input_payload(&self) -> Option<InputPayload<'a>> {
    if self.payload_type() == ClientMessagePayload::InputPayload {
      self.payload().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { InputPayload::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn payload_as_join_game_payload(&self) -> Option<JoinGamePayload<'a>> {
    if self.payload_type() == ClientMessagePayload::JoinGamePayload {
      self.payload().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { JoinGamePayload::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn payload_as_leave_game_payload(&self) -> Option<LeaveGamePayload<'a>> {
    if self.payload_type() == ClientMessagePayload::LeaveGamePayload {
      self.payload().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { LeaveGamePayload::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn payload_as_new_game_payload(&self) -> Option<NewGamePayload<'a>> {
    if self.payload_type() == ClientMessagePayload::NewGamePayload {
      self.payload().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { NewGamePayload::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn payload_as_query_state_payload(&self) -> Option<QueryStatePayload<'a>> {
    if self.payload_type() == ClientMessagePayload::QueryStatePayload {
      self.payload().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { QueryStatePayload::init_from_table(t) }
     })
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for ClientMessage<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("timestamp", Self::VT_TIMESTAMP, false)?
     .visit_union::<ClientMessagePayload, _>("payload_type", Self::VT_PAYLOAD_TYPE, "payload", Self::VT_PAYLOAD, false, |key, v, pos| {
        match key {
          ClientMessagePayload::ChatPayload => v.verify_union_variant::<flatbuffers::ForwardsUOffset<ChatPayload>>("ClientMessagePayload::ChatPayload", pos),
          ClientMessagePayload::InputPayload => v.verify_union_variant::<flatbuffers::ForwardsUOffset<InputPayload>>("ClientMessagePayload::InputPayload", pos),
          ClientMessagePayload::JoinGamePayload => v.verify_union_variant::<flatbuffers::ForwardsUOffset<JoinGamePayload>>("ClientMessagePayload::JoinGamePayload", pos),
          ClientMessagePayload::LeaveGamePayload => v.verify_union_variant::<flatbuffers::ForwardsUOffset<LeaveGamePayload>>("ClientMessagePayload::LeaveGamePayload", pos),
          ClientMessagePayload::NewGamePayload => v.verify_union_variant::<flatbuffers::ForwardsUOffset<NewGamePayload>>("ClientMessagePayload::NewGamePayload", pos),
          ClientMessagePayload::QueryStatePayload => v.verify_union_variant::<flatbuffers::ForwardsUOffset<QueryStatePayload>>("ClientMessagePayload::QueryStatePayload", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct ClientMessageArgs {
    pub timestamp: u64,
    pub payload_type: ClientMessagePayload,
    pub payload: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for ClientMessageArgs {
  #[inline]
  fn default() -> Self {
    ClientMessageArgs {
      timestamp: 0,
      payload_type: ClientMessagePayload::NONE,
      payload: None,
    }
  }
}

pub struct ClientMessageBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ClientMessageBuilder<'a, 'b> {
  #[inline]
  pub fn add_timestamp(&mut self, timestamp: u64) {
    self.fbb_.push_slot::<u64>(ClientMessage::VT_TIMESTAMP, timestamp, 0);
  }
  #[inline]
  pub fn add_payload_type(&mut self, payload_type: ClientMessagePayload) {
    self.fbb_.push_slot::<ClientMessagePayload>(ClientMessage::VT_PAYLOAD_TYPE, payload_type, ClientMessagePayload::NONE);
  }
  #[inline]
  pub fn add_payload(&mut self, payload: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ClientMessage::VT_PAYLOAD, payload);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ClientMessageBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ClientMessageBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ClientMessage<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ClientMessage<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ClientMessage");
      ds.field("timestamp", &self.timestamp());
      ds.field("payload_type", &self.payload_type());
      match self.payload_type() {
        ClientMessagePayload::ChatPayload => {
          if let Some(x) = self.payload_as_chat_payload() {
            ds.field("payload", &x)
          } else {
            ds.field("payload", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ClientMessagePayload::InputPayload => {
          if let Some(x) = self.payload_as_input_payload() {
            ds.field("payload", &x)
          } else {
            ds.field("payload", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ClientMessagePayload::JoinGamePayload => {
          if let Some(x) = self.payload_as_join_game_payload() {
            ds.field("payload", &x)
          } else {
            ds.field("payload", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ClientMessagePayload::LeaveGamePayload => {
          if let Some(x) = self.payload_as_leave_game_payload() {
            ds.field("payload", &x)
          } else {
            ds.field("payload", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ClientMessagePayload::NewGamePayload => {
          if let Some(x) = self.payload_as_new_game_payload() {
            ds.field("payload", &x)
          } else {
            ds.field("payload", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ClientMessagePayload::QueryStatePayload => {
          if let Some(x) = self.payload_as_query_state_payload() {
            ds.field("payload", &x)
          } else {
            ds.field("payload", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("payload", &x)
        },
      };
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `ClientMessage`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_client_message_unchecked`.
pub fn root_as_client_message(buf: &[u8]) -> Result<ClientMessage, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<ClientMessage>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `ClientMessage` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_client_message_unchecked`.
pub fn size_prefixed_root_as_client_message(buf: &[u8]) -> Result<ClientMessage, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<ClientMessage>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `ClientMessage` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_client_message_unchecked`.
pub fn root_as_client_message_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ClientMessage<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<ClientMessage<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `ClientMessage` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_client_message_unchecked`.
pub fn size_prefixed_root_as_client_message_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ClientMessage<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<ClientMessage<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a ClientMessage and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `ClientMessage`.
pub unsafe fn root_as_client_message_unchecked(buf: &[u8]) -> ClientMessage {
  flatbuffers::root_unchecked::<ClientMessage>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed ClientMessage and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `ClientMessage`.
pub unsafe fn size_prefixed_root_as_client_message_unchecked(buf: &[u8]) -> ClientMessage {
  flatbuffers::size_prefixed_root_unchecked::<ClientMessage>(buf)
}
#[inline]
pub fn finish_client_message_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<ClientMessage<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_client_message_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<ClientMessage<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod ClientMessages

