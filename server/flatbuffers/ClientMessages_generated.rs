// automatically generated by the FlatBuffers compiler, do not modify

// @generated

use crate::Chat_generated::*;
use crate::Math_generated::*;
use crate::Player_generated::*;
use crate::User_generated::*;
use core::cmp::Ordering;
use core::mem;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod client_messages {

    use crate::Chat_generated::*;
    use crate::Math_generated::*;
    use crate::Player_generated::*;
    use crate::User_generated::*;
    use core::cmp::Ordering;
    use core::mem;

    extern crate flatbuffers;
    use self::flatbuffers::{EndianScalar, Follow};

    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MIN_CLIENT_MESSAGE_PAYLOAD: u8 = 0;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MAX_CLIENT_MESSAGE_PAYLOAD: u8 = 4;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    #[allow(non_camel_case_types)]
    pub const ENUM_VALUES_CLIENT_MESSAGE_PAYLOAD: [ClientMessagePayload; 5] = [
        ClientMessagePayload::NONE,
        ClientMessagePayload::JoinPayload,
        ClientMessagePayload::LeavePayload,
        ClientMessagePayload::ChatPayload,
        ClientMessagePayload::QueryStatePayload,
    ];

    #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
    #[repr(transparent)]
    pub struct ClientMessagePayload(pub u8);
    #[allow(non_upper_case_globals)]
    impl ClientMessagePayload {
        pub const NONE: Self = Self(0);
        pub const JoinPayload: Self = Self(1);
        pub const LeavePayload: Self = Self(2);
        pub const ChatPayload: Self = Self(3);
        pub const QueryStatePayload: Self = Self(4);

        pub const ENUM_MIN: u8 = 0;
        pub const ENUM_MAX: u8 = 4;
        pub const ENUM_VALUES: &'static [Self] = &[
            Self::NONE,
            Self::JoinPayload,
            Self::LeavePayload,
            Self::ChatPayload,
            Self::QueryStatePayload,
        ];
        /// Returns the variant's name or "" if unknown.
        pub fn variant_name(self) -> Option<&'static str> {
            match self {
                Self::NONE => Some("NONE"),
                Self::JoinPayload => Some("JoinPayload"),
                Self::LeavePayload => Some("LeavePayload"),
                Self::ChatPayload => Some("ChatPayload"),
                Self::QueryStatePayload => Some("QueryStatePayload"),
                _ => None,
            }
        }
    }
    impl core::fmt::Debug for ClientMessagePayload {
        fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
            if let Some(name) = self.variant_name() {
                f.write_str(name)
            } else {
                f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
            }
        }
    }
    impl<'a> flatbuffers::Follow<'a> for ClientMessagePayload {
        type Inner = Self;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            let b = flatbuffers::read_scalar_at::<u8>(buf, loc);
            Self(b)
        }
    }

    impl flatbuffers::Push for ClientMessagePayload {
        type Output = ClientMessagePayload;
        #[inline]
        unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
            flatbuffers::emplace_scalar::<u8>(dst, self.0);
        }
    }

    impl flatbuffers::EndianScalar for ClientMessagePayload {
        type Scalar = u8;
        #[inline]
        fn to_little_endian(self) -> u8 {
            self.0.to_le()
        }
        #[inline]
        #[allow(clippy::wrong_self_convention)]
        fn from_little_endian(v: u8) -> Self {
            let b = u8::from_le(v);
            Self(b)
        }
    }

    impl<'a> flatbuffers::Verifiable for ClientMessagePayload {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            u8::run_verifier(v, pos)
        }
    }

    impl flatbuffers::SimpleToVerifyInSlice for ClientMessagePayload {}
    pub struct ClientMessagePayloadUnionTableOffset {}

    pub enum JoinPayloadOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct JoinPayload<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for JoinPayload<'a> {
        type Inner = JoinPayload<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> JoinPayload<'a> {
        pub const VT_USER: flatbuffers::VOffsetT = 4;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            JoinPayload { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args JoinPayloadArgs<'args>,
        ) -> flatbuffers::WIPOffset<JoinPayload<'bldr>> {
            let mut builder = JoinPayloadBuilder::new(_fbb);
            if let Some(x) = args.user {
                builder.add_user(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn user(&self) -> Option<super::user::User<'a>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<super::user::User>>(
                        JoinPayload::VT_USER,
                        None,
                    )
            }
        }
    }

    impl flatbuffers::Verifiable for JoinPayload<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<flatbuffers::ForwardsUOffset<super::user::User>>(
                    "user",
                    Self::VT_USER,
                    false,
                )?
                .finish();
            Ok(())
        }
    }
    pub struct JoinPayloadArgs<'a> {
        pub user: Option<flatbuffers::WIPOffset<super::user::User<'a>>>,
    }
    impl<'a> Default for JoinPayloadArgs<'a> {
        #[inline]
        fn default() -> Self {
            JoinPayloadArgs { user: None }
        }
    }

    pub struct JoinPayloadBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> JoinPayloadBuilder<'a, 'b> {
        #[inline]
        pub fn add_user(&mut self, user: flatbuffers::WIPOffset<super::user::User<'b>>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<super::user::User>>(
                    JoinPayload::VT_USER,
                    user,
                );
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> JoinPayloadBuilder<'a, 'b> {
            let start = _fbb.start_table();
            JoinPayloadBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<JoinPayload<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for JoinPayload<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("JoinPayload");
            ds.field("user", &self.user());
            ds.finish()
        }
    }
    pub enum LeavePayloadOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct LeavePayload<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for LeavePayload<'a> {
        type Inner = LeavePayload<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> LeavePayload<'a> {
        pub const VT_USER: flatbuffers::VOffsetT = 4;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            LeavePayload { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args LeavePayloadArgs<'args>,
        ) -> flatbuffers::WIPOffset<LeavePayload<'bldr>> {
            let mut builder = LeavePayloadBuilder::new(_fbb);
            if let Some(x) = args.user {
                builder.add_user(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn user(&self) -> Option<super::user::User<'a>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<super::user::User>>(
                        LeavePayload::VT_USER,
                        None,
                    )
            }
        }
    }

    impl flatbuffers::Verifiable for LeavePayload<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<flatbuffers::ForwardsUOffset<super::user::User>>(
                    "user",
                    Self::VT_USER,
                    false,
                )?
                .finish();
            Ok(())
        }
    }
    pub struct LeavePayloadArgs<'a> {
        pub user: Option<flatbuffers::WIPOffset<super::user::User<'a>>>,
    }
    impl<'a> Default for LeavePayloadArgs<'a> {
        #[inline]
        fn default() -> Self {
            LeavePayloadArgs { user: None }
        }
    }

    pub struct LeavePayloadBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> LeavePayloadBuilder<'a, 'b> {
        #[inline]
        pub fn add_user(&mut self, user: flatbuffers::WIPOffset<super::user::User<'b>>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<super::user::User>>(
                    LeavePayload::VT_USER,
                    user,
                );
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        ) -> LeavePayloadBuilder<'a, 'b> {
            let start = _fbb.start_table();
            LeavePayloadBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<LeavePayload<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for LeavePayload<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("LeavePayload");
            ds.field("user", &self.user());
            ds.finish()
        }
    }
    pub enum ChatPayloadOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct ChatPayload<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for ChatPayload<'a> {
        type Inner = ChatPayload<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> ChatPayload<'a> {
        pub const VT_USER: flatbuffers::VOffsetT = 4;
        pub const VT_MESSAGE: flatbuffers::VOffsetT = 6;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            ChatPayload { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args ChatPayloadArgs<'args>,
        ) -> flatbuffers::WIPOffset<ChatPayload<'bldr>> {
            let mut builder = ChatPayloadBuilder::new(_fbb);
            if let Some(x) = args.message {
                builder.add_message(x);
            }
            if let Some(x) = args.user {
                builder.add_user(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn user(&self) -> Option<super::user::User<'a>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<super::user::User>>(
                        ChatPayload::VT_USER,
                        None,
                    )
            }
        }
        #[inline]
        pub fn message(&self) -> Option<super::chat::ChatMessage<'a>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<super::chat::ChatMessage>>(
                        ChatPayload::VT_MESSAGE,
                        None,
                    )
            }
        }
    }

    impl flatbuffers::Verifiable for ChatPayload<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<flatbuffers::ForwardsUOffset<super::user::User>>(
                    "user",
                    Self::VT_USER,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<super::chat::ChatMessage>>(
                    "message",
                    Self::VT_MESSAGE,
                    false,
                )?
                .finish();
            Ok(())
        }
    }
    pub struct ChatPayloadArgs<'a> {
        pub user: Option<flatbuffers::WIPOffset<super::user::User<'a>>>,
        pub message: Option<flatbuffers::WIPOffset<super::chat::ChatMessage<'a>>>,
    }
    impl<'a> Default for ChatPayloadArgs<'a> {
        #[inline]
        fn default() -> Self {
            ChatPayloadArgs {
                user: None,
                message: None,
            }
        }
    }

    pub struct ChatPayloadBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> ChatPayloadBuilder<'a, 'b> {
        #[inline]
        pub fn add_user(&mut self, user: flatbuffers::WIPOffset<super::user::User<'b>>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<super::user::User>>(
                    ChatPayload::VT_USER,
                    user,
                );
        }
        #[inline]
        pub fn add_message(
            &mut self,
            message: flatbuffers::WIPOffset<super::chat::ChatMessage<'b>>,
        ) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<super::chat::ChatMessage>>(
                    ChatPayload::VT_MESSAGE,
                    message,
                );
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ChatPayloadBuilder<'a, 'b> {
            let start = _fbb.start_table();
            ChatPayloadBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<ChatPayload<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for ChatPayload<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("ChatPayload");
            ds.field("user", &self.user());
            ds.field("message", &self.message());
            ds.finish()
        }
    }
    pub enum InputPayloadOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct InputPayload<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for InputPayload<'a> {
        type Inner = InputPayload<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> InputPayload<'a> {
        pub const VT_USER: flatbuffers::VOffsetT = 4;
        pub const VT_PLAYER: flatbuffers::VOffsetT = 6;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            InputPayload { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args InputPayloadArgs<'args>,
        ) -> flatbuffers::WIPOffset<InputPayload<'bldr>> {
            let mut builder = InputPayloadBuilder::new(_fbb);
            if let Some(x) = args.player {
                builder.add_player(x);
            }
            if let Some(x) = args.user {
                builder.add_user(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn user(&self) -> Option<super::user::User<'a>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<super::user::User>>(
                        InputPayload::VT_USER,
                        None,
                    )
            }
        }
        #[inline]
        pub fn player(&self) -> Option<super::player::Player<'a>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<super::player::Player>>(
                        InputPayload::VT_PLAYER,
                        None,
                    )
            }
        }
    }

    impl flatbuffers::Verifiable for InputPayload<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<flatbuffers::ForwardsUOffset<super::user::User>>(
                    "user",
                    Self::VT_USER,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<super::player::Player>>(
                    "player",
                    Self::VT_PLAYER,
                    false,
                )?
                .finish();
            Ok(())
        }
    }
    pub struct InputPayloadArgs<'a> {
        pub user: Option<flatbuffers::WIPOffset<super::user::User<'a>>>,
        pub player: Option<flatbuffers::WIPOffset<super::player::Player<'a>>>,
    }
    impl<'a> Default for InputPayloadArgs<'a> {
        #[inline]
        fn default() -> Self {
            InputPayloadArgs {
                user: None,
                player: None,
            }
        }
    }

    pub struct InputPayloadBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> InputPayloadBuilder<'a, 'b> {
        #[inline]
        pub fn add_user(&mut self, user: flatbuffers::WIPOffset<super::user::User<'b>>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<super::user::User>>(
                    InputPayload::VT_USER,
                    user,
                );
        }
        #[inline]
        pub fn add_player(&mut self, player: flatbuffers::WIPOffset<super::player::Player<'b>>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<super::player::Player>>(
                    InputPayload::VT_PLAYER,
                    player,
                );
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        ) -> InputPayloadBuilder<'a, 'b> {
            let start = _fbb.start_table();
            InputPayloadBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<InputPayload<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for InputPayload<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("InputPayload");
            ds.field("user", &self.user());
            ds.field("player", &self.player());
            ds.finish()
        }
    }
    pub enum QueryStatePayloadOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct QueryStatePayload<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for QueryStatePayload<'a> {
        type Inner = QueryStatePayload<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> QueryStatePayload<'a> {
        pub const VT_USER: flatbuffers::VOffsetT = 4;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            QueryStatePayload { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args QueryStatePayloadArgs<'args>,
        ) -> flatbuffers::WIPOffset<QueryStatePayload<'bldr>> {
            let mut builder = QueryStatePayloadBuilder::new(_fbb);
            if let Some(x) = args.user {
                builder.add_user(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn user(&self) -> Option<super::user::User<'a>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<super::user::User>>(
                        QueryStatePayload::VT_USER,
                        None,
                    )
            }
        }
    }

    impl flatbuffers::Verifiable for QueryStatePayload<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<flatbuffers::ForwardsUOffset<super::user::User>>(
                    "user",
                    Self::VT_USER,
                    false,
                )?
                .finish();
            Ok(())
        }
    }
    pub struct QueryStatePayloadArgs<'a> {
        pub user: Option<flatbuffers::WIPOffset<super::user::User<'a>>>,
    }
    impl<'a> Default for QueryStatePayloadArgs<'a> {
        #[inline]
        fn default() -> Self {
            QueryStatePayloadArgs { user: None }
        }
    }

    pub struct QueryStatePayloadBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> QueryStatePayloadBuilder<'a, 'b> {
        #[inline]
        pub fn add_user(&mut self, user: flatbuffers::WIPOffset<super::user::User<'b>>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<super::user::User>>(
                    QueryStatePayload::VT_USER,
                    user,
                );
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        ) -> QueryStatePayloadBuilder<'a, 'b> {
            let start = _fbb.start_table();
            QueryStatePayloadBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<QueryStatePayload<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for QueryStatePayload<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("QueryStatePayload");
            ds.field("user", &self.user());
            ds.finish()
        }
    }
    pub enum ClientMessageOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct ClientMessage<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for ClientMessage<'a> {
        type Inner = ClientMessage<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> ClientMessage<'a> {
        pub const VT_TIMESTAMP: flatbuffers::VOffsetT = 4;
        pub const VT_PAYLOAD_TYPE: flatbuffers::VOffsetT = 6;
        pub const VT_PAYLOAD: flatbuffers::VOffsetT = 8;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            ClientMessage { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args ClientMessageArgs,
        ) -> flatbuffers::WIPOffset<ClientMessage<'bldr>> {
            let mut builder = ClientMessageBuilder::new(_fbb);
            builder.add_timestamp(args.timestamp);
            if let Some(x) = args.payload {
                builder.add_payload(x);
            }
            builder.add_payload_type(args.payload_type);
            builder.finish()
        }

        #[inline]
        pub fn timestamp(&self) -> u64 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<u64>(ClientMessage::VT_TIMESTAMP, Some(0))
                    .unwrap()
            }
        }
        #[inline]
        pub fn payload_type(&self) -> ClientMessagePayload {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<ClientMessagePayload>(
                        ClientMessage::VT_PAYLOAD_TYPE,
                        Some(ClientMessagePayload::NONE),
                    )
                    .unwrap()
            }
        }
        #[inline]
        pub fn payload(&self) -> Option<flatbuffers::Table<'a>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(
                        ClientMessage::VT_PAYLOAD,
                        None,
                    )
            }
        }
        #[inline]
        #[allow(non_snake_case)]
        pub fn payload_as_join_payload(&self) -> Option<JoinPayload<'a>> {
            if self.payload_type() == ClientMessagePayload::JoinPayload {
                self.payload().map(|t| {
                    // Safety:
                    // Created from a valid Table for this object
                    // Which contains a valid union in this slot
                    unsafe { JoinPayload::init_from_table(t) }
                })
            } else {
                None
            }
        }

        #[inline]
        #[allow(non_snake_case)]
        pub fn payload_as_leave_payload(&self) -> Option<LeavePayload<'a>> {
            if self.payload_type() == ClientMessagePayload::LeavePayload {
                self.payload().map(|t| {
                    // Safety:
                    // Created from a valid Table for this object
                    // Which contains a valid union in this slot
                    unsafe { LeavePayload::init_from_table(t) }
                })
            } else {
                None
            }
        }

        #[inline]
        #[allow(non_snake_case)]
        pub fn payload_as_chat_payload(&self) -> Option<ChatPayload<'a>> {
            if self.payload_type() == ClientMessagePayload::ChatPayload {
                self.payload().map(|t| {
                    // Safety:
                    // Created from a valid Table for this object
                    // Which contains a valid union in this slot
                    unsafe { ChatPayload::init_from_table(t) }
                })
            } else {
                None
            }
        }

        #[inline]
        #[allow(non_snake_case)]
        pub fn payload_as_query_state_payload(&self) -> Option<QueryStatePayload<'a>> {
            if self.payload_type() == ClientMessagePayload::QueryStatePayload {
                self.payload().map(|t| {
                    // Safety:
                    // Created from a valid Table for this object
                    // Which contains a valid union in this slot
                    unsafe { QueryStatePayload::init_from_table(t) }
                })
            } else {
                None
            }
        }
    }

    impl flatbuffers::Verifiable for ClientMessage<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<u64>("timestamp", Self::VT_TIMESTAMP, false)?
                .visit_union::<ClientMessagePayload, _>(
                    "payload_type",
                    Self::VT_PAYLOAD_TYPE,
                    "payload",
                    Self::VT_PAYLOAD,
                    false,
                    |key, v, pos| {
                        match key {
                            ClientMessagePayload::JoinPayload => v
                                .verify_union_variant::<flatbuffers::ForwardsUOffset<JoinPayload>>(
                                    "ClientMessagePayload::JoinPayload",
                                    pos,
                                ),
                            ClientMessagePayload::LeavePayload => v
                                .verify_union_variant::<flatbuffers::ForwardsUOffset<LeavePayload>>(
                                    "ClientMessagePayload::LeavePayload",
                                    pos,
                                ),
                            ClientMessagePayload::ChatPayload => v
                                .verify_union_variant::<flatbuffers::ForwardsUOffset<ChatPayload>>(
                                    "ClientMessagePayload::ChatPayload",
                                    pos,
                                ),
                            ClientMessagePayload::QueryStatePayload => v
                                .verify_union_variant::<flatbuffers::ForwardsUOffset<
                                QueryStatePayload,
                            >>(
                                "ClientMessagePayload::QueryStatePayload",
                                pos,
                            ),
                            _ => Ok(()),
                        }
                    },
                )?
                .finish();
            Ok(())
        }
    }
    pub struct ClientMessageArgs {
        pub timestamp: u64,
        pub payload_type: ClientMessagePayload,
        pub payload: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
    }
    impl<'a> Default for ClientMessageArgs {
        #[inline]
        fn default() -> Self {
            ClientMessageArgs {
                timestamp: 0,
                payload_type: ClientMessagePayload::NONE,
                payload: None,
            }
        }
    }

    pub struct ClientMessageBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> ClientMessageBuilder<'a, 'b> {
        #[inline]
        pub fn add_timestamp(&mut self, timestamp: u64) {
            self.fbb_
                .push_slot::<u64>(ClientMessage::VT_TIMESTAMP, timestamp, 0);
        }
        #[inline]
        pub fn add_payload_type(&mut self, payload_type: ClientMessagePayload) {
            self.fbb_.push_slot::<ClientMessagePayload>(
                ClientMessage::VT_PAYLOAD_TYPE,
                payload_type,
                ClientMessagePayload::NONE,
            );
        }
        #[inline]
        pub fn add_payload(
            &mut self,
            payload: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>,
        ) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(ClientMessage::VT_PAYLOAD, payload);
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        ) -> ClientMessageBuilder<'a, 'b> {
            let start = _fbb.start_table();
            ClientMessageBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<ClientMessage<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for ClientMessage<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("ClientMessage");
            ds.field("timestamp", &self.timestamp());
            ds.field("payload_type", &self.payload_type());
            match self.payload_type() {
                ClientMessagePayload::JoinPayload => {
                    if let Some(x) = self.payload_as_join_payload() {
                        ds.field("payload", &x)
                    } else {
                        ds.field(
                            "payload",
                            &"InvalidFlatbuffer: Union discriminant does not match value.",
                        )
                    }
                }
                ClientMessagePayload::LeavePayload => {
                    if let Some(x) = self.payload_as_leave_payload() {
                        ds.field("payload", &x)
                    } else {
                        ds.field(
                            "payload",
                            &"InvalidFlatbuffer: Union discriminant does not match value.",
                        )
                    }
                }
                ClientMessagePayload::ChatPayload => {
                    if let Some(x) = self.payload_as_chat_payload() {
                        ds.field("payload", &x)
                    } else {
                        ds.field(
                            "payload",
                            &"InvalidFlatbuffer: Union discriminant does not match value.",
                        )
                    }
                }
                ClientMessagePayload::QueryStatePayload => {
                    if let Some(x) = self.payload_as_query_state_payload() {
                        ds.field("payload", &x)
                    } else {
                        ds.field(
                            "payload",
                            &"InvalidFlatbuffer: Union discriminant does not match value.",
                        )
                    }
                }
                _ => {
                    let x: Option<()> = None;
                    ds.field("payload", &x)
                }
            };
            ds.finish()
        }
    }
    #[inline]
    /// Verifies that a buffer of bytes contains a `ClientMessage`
    /// and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_client_message_unchecked`.
    pub fn root_as_client_message(
        buf: &[u8],
    ) -> Result<ClientMessage, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root::<ClientMessage>(buf)
    }
    #[inline]
    /// Verifies that a buffer of bytes contains a size prefixed
    /// `ClientMessage` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `size_prefixed_root_as_client_message_unchecked`.
    pub fn size_prefixed_root_as_client_message(
        buf: &[u8],
    ) -> Result<ClientMessage, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root::<ClientMessage>(buf)
    }
    #[inline]
    /// Verifies, with the given options, that a buffer of bytes
    /// contains a `ClientMessage` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_client_message_unchecked`.
    pub fn root_as_client_message_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<ClientMessage<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root_with_opts::<ClientMessage<'b>>(opts, buf)
    }
    #[inline]
    /// Verifies, with the given verifier options, that a buffer of
    /// bytes contains a size prefixed `ClientMessage` and returns
    /// it. Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_client_message_unchecked`.
    pub fn size_prefixed_root_as_client_message_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<ClientMessage<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root_with_opts::<ClientMessage<'b>>(opts, buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a ClientMessage and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid `ClientMessage`.
    pub unsafe fn root_as_client_message_unchecked(buf: &[u8]) -> ClientMessage {
        flatbuffers::root_unchecked::<ClientMessage>(buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a size prefixed ClientMessage and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid size prefixed `ClientMessage`.
    pub unsafe fn size_prefixed_root_as_client_message_unchecked(buf: &[u8]) -> ClientMessage {
        flatbuffers::size_prefixed_root_unchecked::<ClientMessage>(buf)
    }
    #[inline]
    pub fn finish_client_message_buffer<'a, 'b>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        root: flatbuffers::WIPOffset<ClientMessage<'a>>,
    ) {
        fbb.finish(root, None);
    }

    #[inline]
    pub fn finish_size_prefixed_client_message_buffer<'a, 'b>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        root: flatbuffers::WIPOffset<ClientMessage<'a>>,
    ) {
        fbb.finish_size_prefixed(root, None);
    }
} // pub mod ClientMessages
