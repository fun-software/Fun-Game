// automatically generated by the FlatBuffers compiler, do not modify

// @generated

use core::cmp::Ordering;
use core::mem;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod server_messages {

    use core::cmp::Ordering;
    use core::mem;

    extern crate flatbuffers;
    use self::flatbuffers::{EndianScalar, Follow};

    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MIN_SERVER_MESSAGE_PAYLOAD: u8 = 0;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MAX_SERVER_MESSAGE_PAYLOAD: u8 = 4;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    #[allow(non_camel_case_types)]
    pub const ENUM_VALUES_SERVER_MESSAGE_PAYLOAD: [ServerMessagePayload; 5] = [
        ServerMessagePayload::NONE,
        ServerMessagePayload::JoinPayload,
        ServerMessagePayload::LeavePayload,
        ServerMessagePayload::ChatPayload,
        ServerMessagePayload::StatePayload,
    ];

    #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
    #[repr(transparent)]
    pub struct ServerMessagePayload(pub u8);
    #[allow(non_upper_case_globals)]
    impl ServerMessagePayload {
        pub const NONE: Self = Self(0);
        pub const JoinPayload: Self = Self(1);
        pub const LeavePayload: Self = Self(2);
        pub const ChatPayload: Self = Self(3);
        pub const StatePayload: Self = Self(4);

        pub const ENUM_MIN: u8 = 0;
        pub const ENUM_MAX: u8 = 4;
        pub const ENUM_VALUES: &'static [Self] = &[
            Self::NONE,
            Self::JoinPayload,
            Self::LeavePayload,
            Self::ChatPayload,
            Self::StatePayload,
        ];
        /// Returns the variant's name or "" if unknown.
        pub fn variant_name(self) -> Option<&'static str> {
            match self {
                Self::NONE => Some("NONE"),
                Self::JoinPayload => Some("JoinPayload"),
                Self::LeavePayload => Some("LeavePayload"),
                Self::ChatPayload => Some("ChatPayload"),
                Self::StatePayload => Some("StatePayload"),
                _ => None,
            }
        }
    }
    impl core::fmt::Debug for ServerMessagePayload {
        fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
            if let Some(name) = self.variant_name() {
                f.write_str(name)
            } else {
                f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
            }
        }
    }
    impl<'a> flatbuffers::Follow<'a> for ServerMessagePayload {
        type Inner = Self;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            let b = flatbuffers::read_scalar_at::<u8>(buf, loc);
            Self(b)
        }
    }

    impl flatbuffers::Push for ServerMessagePayload {
        type Output = ServerMessagePayload;
        #[inline]
        unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
            flatbuffers::emplace_scalar::<u8>(dst, self.0);
        }
    }

    impl flatbuffers::EndianScalar for ServerMessagePayload {
        type Scalar = u8;
        #[inline]
        fn to_little_endian(self) -> u8 {
            self.0.to_le()
        }
        #[inline]
        #[allow(clippy::wrong_self_convention)]
        fn from_little_endian(v: u8) -> Self {
            let b = u8::from_le(v);
            Self(b)
        }
    }

    impl<'a> flatbuffers::Verifiable for ServerMessagePayload {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            u8::run_verifier(v, pos)
        }
    }

    impl flatbuffers::SimpleToVerifyInSlice for ServerMessagePayload {}
    pub struct ServerMessagePayloadUnionTableOffset {}

    pub enum JoinPayloadOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct JoinPayload<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for JoinPayload<'a> {
        type Inner = JoinPayload<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> JoinPayload<'a> {
        pub const VT_NAME: flatbuffers::VOffsetT = 4;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            JoinPayload { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args JoinPayloadArgs<'args>,
        ) -> flatbuffers::WIPOffset<JoinPayload<'bldr>> {
            let mut builder = JoinPayloadBuilder::new(_fbb);
            if let Some(x) = args.name {
                builder.add_name(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn name(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(JoinPayload::VT_NAME, None)
            }
        }
    }

    impl flatbuffers::Verifiable for JoinPayload<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
                .finish();
            Ok(())
        }
    }
    pub struct JoinPayloadArgs<'a> {
        pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    }
    impl<'a> Default for JoinPayloadArgs<'a> {
        #[inline]
        fn default() -> Self {
            JoinPayloadArgs { name: None }
        }
    }

    pub struct JoinPayloadBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> JoinPayloadBuilder<'a, 'b> {
        #[inline]
        pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(JoinPayload::VT_NAME, name);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> JoinPayloadBuilder<'a, 'b> {
            let start = _fbb.start_table();
            JoinPayloadBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<JoinPayload<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for JoinPayload<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("JoinPayload");
            ds.field("name", &self.name());
            ds.finish()
        }
    }
    pub enum LeavePayloadOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct LeavePayload<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for LeavePayload<'a> {
        type Inner = LeavePayload<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> LeavePayload<'a> {
        pub const VT_NAME: flatbuffers::VOffsetT = 4;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            LeavePayload { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args LeavePayloadArgs<'args>,
        ) -> flatbuffers::WIPOffset<LeavePayload<'bldr>> {
            let mut builder = LeavePayloadBuilder::new(_fbb);
            if let Some(x) = args.name {
                builder.add_name(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn name(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(LeavePayload::VT_NAME, None)
            }
        }
    }

    impl flatbuffers::Verifiable for LeavePayload<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
                .finish();
            Ok(())
        }
    }
    pub struct LeavePayloadArgs<'a> {
        pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    }
    impl<'a> Default for LeavePayloadArgs<'a> {
        #[inline]
        fn default() -> Self {
            LeavePayloadArgs { name: None }
        }
    }

    pub struct LeavePayloadBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> LeavePayloadBuilder<'a, 'b> {
        #[inline]
        pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(LeavePayload::VT_NAME, name);
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        ) -> LeavePayloadBuilder<'a, 'b> {
            let start = _fbb.start_table();
            LeavePayloadBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<LeavePayload<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for LeavePayload<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("LeavePayload");
            ds.field("name", &self.name());
            ds.finish()
        }
    }
    pub enum ChatPayloadOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct ChatPayload<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for ChatPayload<'a> {
        type Inner = ChatPayload<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> ChatPayload<'a> {
        pub const VT_NAME: flatbuffers::VOffsetT = 4;
        pub const VT_MESSAGE: flatbuffers::VOffsetT = 6;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            ChatPayload { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args ChatPayloadArgs<'args>,
        ) -> flatbuffers::WIPOffset<ChatPayload<'bldr>> {
            let mut builder = ChatPayloadBuilder::new(_fbb);
            if let Some(x) = args.message {
                builder.add_message(x);
            }
            if let Some(x) = args.name {
                builder.add_name(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn name(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(ChatPayload::VT_NAME, None)
            }
        }
        #[inline]
        pub fn message(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(ChatPayload::VT_MESSAGE, None)
            }
        }
    }

    impl flatbuffers::Verifiable for ChatPayload<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "message",
                    Self::VT_MESSAGE,
                    false,
                )?
                .finish();
            Ok(())
        }
    }
    pub struct ChatPayloadArgs<'a> {
        pub name: Option<flatbuffers::WIPOffset<&'a str>>,
        pub message: Option<flatbuffers::WIPOffset<&'a str>>,
    }
    impl<'a> Default for ChatPayloadArgs<'a> {
        #[inline]
        fn default() -> Self {
            ChatPayloadArgs {
                name: None,
                message: None,
            }
        }
    }

    pub struct ChatPayloadBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> ChatPayloadBuilder<'a, 'b> {
        #[inline]
        pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(ChatPayload::VT_NAME, name);
        }
        #[inline]
        pub fn add_message(&mut self, message: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(ChatPayload::VT_MESSAGE, message);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ChatPayloadBuilder<'a, 'b> {
            let start = _fbb.start_table();
            ChatPayloadBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<ChatPayload<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for ChatPayload<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("ChatPayload");
            ds.field("name", &self.name());
            ds.field("message", &self.message());
            ds.finish()
        }
    }
    pub enum StatePayloadOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct StatePayload<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for StatePayload<'a> {
        type Inner = StatePayload<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> StatePayload<'a> {
        pub const VT_PLAYERS: flatbuffers::VOffsetT = 4;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            StatePayload { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args StatePayloadArgs<'args>,
        ) -> flatbuffers::WIPOffset<StatePayload<'bldr>> {
            let mut builder = StatePayloadBuilder::new(_fbb);
            if let Some(x) = args.players {
                builder.add_players(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn players(
            &self,
        ) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab.get::<flatbuffers::ForwardsUOffset<
                    flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>,
                >>(StatePayload::VT_PLAYERS, None)
            }
        }
    }

    impl flatbuffers::Verifiable for StatePayload<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<flatbuffers::ForwardsUOffset<
                    flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>,
                >>("players", Self::VT_PLAYERS, false)?
                .finish();
            Ok(())
        }
    }
    pub struct StatePayloadArgs<'a> {
        pub players: Option<
            flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>,
        >,
    }
    impl<'a> Default for StatePayloadArgs<'a> {
        #[inline]
        fn default() -> Self {
            StatePayloadArgs { players: None }
        }
    }

    pub struct StatePayloadBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> StatePayloadBuilder<'a, 'b> {
        #[inline]
        pub fn add_players(
            &mut self,
            players: flatbuffers::WIPOffset<
                flatbuffers::Vector<'b, flatbuffers::ForwardsUOffset<&'b str>>,
            >,
        ) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(StatePayload::VT_PLAYERS, players);
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        ) -> StatePayloadBuilder<'a, 'b> {
            let start = _fbb.start_table();
            StatePayloadBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<StatePayload<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for StatePayload<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("StatePayload");
            ds.field("players", &self.players());
            ds.finish()
        }
    }
    pub enum ServerMessageOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct ServerMessage<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for ServerMessage<'a> {
        type Inner = ServerMessage<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> ServerMessage<'a> {
        pub const VT_TIMESTAMP: flatbuffers::VOffsetT = 4;
        pub const VT_PAYLOAD_TYPE: flatbuffers::VOffsetT = 6;
        pub const VT_PAYLOAD: flatbuffers::VOffsetT = 8;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            ServerMessage { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args ServerMessageArgs,
        ) -> flatbuffers::WIPOffset<ServerMessage<'bldr>> {
            let mut builder = ServerMessageBuilder::new(_fbb);
            builder.add_timestamp(args.timestamp);
            if let Some(x) = args.payload {
                builder.add_payload(x);
            }
            builder.add_payload_type(args.payload_type);
            builder.finish()
        }

        #[inline]
        pub fn timestamp(&self) -> i64 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<i64>(ServerMessage::VT_TIMESTAMP, Some(0))
                    .unwrap()
            }
        }
        #[inline]
        pub fn payload_type(&self) -> ServerMessagePayload {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<ServerMessagePayload>(
                        ServerMessage::VT_PAYLOAD_TYPE,
                        Some(ServerMessagePayload::NONE),
                    )
                    .unwrap()
            }
        }
        #[inline]
        pub fn payload(&self) -> Option<flatbuffers::Table<'a>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(
                        ServerMessage::VT_PAYLOAD,
                        None,
                    )
            }
        }
        #[inline]
        #[allow(non_snake_case)]
        pub fn payload_as_join_payload(&self) -> Option<JoinPayload<'a>> {
            if self.payload_type() == ServerMessagePayload::JoinPayload {
                self.payload().map(|t| {
                    // Safety:
                    // Created from a valid Table for this object
                    // Which contains a valid union in this slot
                    unsafe { JoinPayload::init_from_table(t) }
                })
            } else {
                None
            }
        }

        #[inline]
        #[allow(non_snake_case)]
        pub fn payload_as_leave_payload(&self) -> Option<LeavePayload<'a>> {
            if self.payload_type() == ServerMessagePayload::LeavePayload {
                self.payload().map(|t| {
                    // Safety:
                    // Created from a valid Table for this object
                    // Which contains a valid union in this slot
                    unsafe { LeavePayload::init_from_table(t) }
                })
            } else {
                None
            }
        }

        #[inline]
        #[allow(non_snake_case)]
        pub fn payload_as_chat_payload(&self) -> Option<ChatPayload<'a>> {
            if self.payload_type() == ServerMessagePayload::ChatPayload {
                self.payload().map(|t| {
                    // Safety:
                    // Created from a valid Table for this object
                    // Which contains a valid union in this slot
                    unsafe { ChatPayload::init_from_table(t) }
                })
            } else {
                None
            }
        }

        #[inline]
        #[allow(non_snake_case)]
        pub fn payload_as_state_payload(&self) -> Option<StatePayload<'a>> {
            if self.payload_type() == ServerMessagePayload::StatePayload {
                self.payload().map(|t| {
                    // Safety:
                    // Created from a valid Table for this object
                    // Which contains a valid union in this slot
                    unsafe { StatePayload::init_from_table(t) }
                })
            } else {
                None
            }
        }
    }

    impl flatbuffers::Verifiable for ServerMessage<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<i64>("timestamp", Self::VT_TIMESTAMP, false)?
                .visit_union::<ServerMessagePayload, _>(
                    "payload_type",
                    Self::VT_PAYLOAD_TYPE,
                    "payload",
                    Self::VT_PAYLOAD,
                    false,
                    |key, v, pos| match key {
                        ServerMessagePayload::JoinPayload => v
                            .verify_union_variant::<flatbuffers::ForwardsUOffset<JoinPayload>>(
                                "ServerMessagePayload::JoinPayload",
                                pos,
                            ),
                        ServerMessagePayload::LeavePayload => v
                            .verify_union_variant::<flatbuffers::ForwardsUOffset<LeavePayload>>(
                                "ServerMessagePayload::LeavePayload",
                                pos,
                            ),
                        ServerMessagePayload::ChatPayload => v
                            .verify_union_variant::<flatbuffers::ForwardsUOffset<ChatPayload>>(
                                "ServerMessagePayload::ChatPayload",
                                pos,
                            ),
                        ServerMessagePayload::StatePayload => v
                            .verify_union_variant::<flatbuffers::ForwardsUOffset<StatePayload>>(
                                "ServerMessagePayload::StatePayload",
                                pos,
                            ),
                        _ => Ok(()),
                    },
                )?
                .finish();
            Ok(())
        }
    }
    pub struct ServerMessageArgs {
        pub timestamp: i64,
        pub payload_type: ServerMessagePayload,
        pub payload: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
    }
    impl<'a> Default for ServerMessageArgs {
        #[inline]
        fn default() -> Self {
            ServerMessageArgs {
                timestamp: 0,
                payload_type: ServerMessagePayload::NONE,
                payload: None,
            }
        }
    }

    pub struct ServerMessageBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> ServerMessageBuilder<'a, 'b> {
        #[inline]
        pub fn add_timestamp(&mut self, timestamp: i64) {
            self.fbb_
                .push_slot::<i64>(ServerMessage::VT_TIMESTAMP, timestamp, 0);
        }
        #[inline]
        pub fn add_payload_type(&mut self, payload_type: ServerMessagePayload) {
            self.fbb_.push_slot::<ServerMessagePayload>(
                ServerMessage::VT_PAYLOAD_TYPE,
                payload_type,
                ServerMessagePayload::NONE,
            );
        }
        #[inline]
        pub fn add_payload(
            &mut self,
            payload: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>,
        ) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(ServerMessage::VT_PAYLOAD, payload);
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        ) -> ServerMessageBuilder<'a, 'b> {
            let start = _fbb.start_table();
            ServerMessageBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<ServerMessage<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for ServerMessage<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("ServerMessage");
            ds.field("timestamp", &self.timestamp());
            ds.field("payload_type", &self.payload_type());
            match self.payload_type() {
                ServerMessagePayload::JoinPayload => {
                    if let Some(x) = self.payload_as_join_payload() {
                        ds.field("payload", &x)
                    } else {
                        ds.field(
                            "payload",
                            &"InvalidFlatbuffer: Union discriminant does not match value.",
                        )
                    }
                }
                ServerMessagePayload::LeavePayload => {
                    if let Some(x) = self.payload_as_leave_payload() {
                        ds.field("payload", &x)
                    } else {
                        ds.field(
                            "payload",
                            &"InvalidFlatbuffer: Union discriminant does not match value.",
                        )
                    }
                }
                ServerMessagePayload::ChatPayload => {
                    if let Some(x) = self.payload_as_chat_payload() {
                        ds.field("payload", &x)
                    } else {
                        ds.field(
                            "payload",
                            &"InvalidFlatbuffer: Union discriminant does not match value.",
                        )
                    }
                }
                ServerMessagePayload::StatePayload => {
                    if let Some(x) = self.payload_as_state_payload() {
                        ds.field("payload", &x)
                    } else {
                        ds.field(
                            "payload",
                            &"InvalidFlatbuffer: Union discriminant does not match value.",
                        )
                    }
                }
                _ => {
                    let x: Option<()> = None;
                    ds.field("payload", &x)
                }
            };
            ds.finish()
        }
    }
} // pub mod ServerMessages
