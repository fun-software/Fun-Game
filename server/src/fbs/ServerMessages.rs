// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use crate::fbs::Player::*;
use crate::fbs::Game::*;
use crate::fbs::Chat::*;
use crate::fbs::GameState::*;
use crate::fbs::Math::*;
use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod servermessages {

  use crate::fbs::Player::*;
  use crate::fbs::Game::*;
  use crate::fbs::Chat::*;
  use crate::fbs::GameState::*;
  use crate::fbs::Math::*;
  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_RESPONSE_CODE: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_RESPONSE_CODE: i8 = 1;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_RESPONSE_CODE: [ResponseCode; 2] = [
  ResponseCode::OK,
  ResponseCode::ERROR,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct ResponseCode(pub i8);
#[allow(non_upper_case_globals)]
impl ResponseCode {
  pub const OK: Self = Self(0);
  pub const ERROR: Self = Self(1);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 1;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::OK,
    Self::ERROR,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::OK => Some("OK"),
      Self::ERROR => Some("ERROR"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for ResponseCode {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for ResponseCode {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for ResponseCode {
    type Output = ResponseCode;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for ResponseCode {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for ResponseCode {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for ResponseCode {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_SERVER_MESSAGE_PAYLOAD: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_SERVER_MESSAGE_PAYLOAD: u8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_SERVER_MESSAGE_PAYLOAD: [ServerMessagePayload; 4] = [
  ServerMessagePayload::NONE,
  ServerMessagePayload::NewGameResponsePayload,
  ServerMessagePayload::JoinGameResponsePayload,
  ServerMessagePayload::StatePayload,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct ServerMessagePayload(pub u8);
#[allow(non_upper_case_globals)]
impl ServerMessagePayload {
  pub const NONE: Self = Self(0);
  pub const NewGameResponsePayload: Self = Self(1);
  pub const JoinGameResponsePayload: Self = Self(2);
  pub const StatePayload: Self = Self(3);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::NONE,
    Self::NewGameResponsePayload,
    Self::JoinGameResponsePayload,
    Self::StatePayload,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::NONE => Some("NONE"),
      Self::NewGameResponsePayload => Some("NewGameResponsePayload"),
      Self::JoinGameResponsePayload => Some("JoinGameResponsePayload"),
      Self::StatePayload => Some("StatePayload"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for ServerMessagePayload {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for ServerMessagePayload {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<u8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for ServerMessagePayload {
    type Output = ServerMessagePayload;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<u8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for ServerMessagePayload {
  type Scalar = u8;
  #[inline]
  fn to_little_endian(self) -> u8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: u8) -> Self {
    let b = u8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for ServerMessagePayload {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for ServerMessagePayload {}
pub struct ServerMessagePayloadUnionTableOffset {}

#[allow(clippy::upper_case_acronyms)]
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub enum ServerMessagePayloadT {
  NONE,
  NewGameResponsePayload(Box<NewGameResponsePayloadT>),
  JoinGameResponsePayload(Box<JoinGameResponsePayloadT>),
  StatePayload(Box<StatePayloadT>),
}
impl Default for ServerMessagePayloadT {
  fn default() -> Self {
    Self::NONE
  }
}
impl ServerMessagePayloadT {
  pub fn server_message_payload_type(&self) -> ServerMessagePayload {
    match self {
      Self::NONE => ServerMessagePayload::NONE,
      Self::NewGameResponsePayload(_) => ServerMessagePayload::NewGameResponsePayload,
      Self::JoinGameResponsePayload(_) => ServerMessagePayload::JoinGameResponsePayload,
      Self::StatePayload(_) => ServerMessagePayload::StatePayload,
    }
  }
  pub fn pack(&self, fbb: &mut flatbuffers::FlatBufferBuilder) -> Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>> {
    match self {
      Self::NONE => None,
      Self::NewGameResponsePayload(v) => Some(v.pack(fbb).as_union_value()),
      Self::JoinGameResponsePayload(v) => Some(v.pack(fbb).as_union_value()),
      Self::StatePayload(v) => Some(v.pack(fbb).as_union_value()),
    }
  }
  /// If the union variant matches, return the owned NewGameResponsePayloadT, setting the union to NONE.
  pub fn take_new_game_response_payload(&mut self) -> Option<Box<NewGameResponsePayloadT>> {
    if let Self::NewGameResponsePayload(_) = self {
      let v = core::mem::replace(self, Self::NONE);
      if let Self::NewGameResponsePayload(w) = v {
        Some(w)
      } else {
        unreachable!()
      }
    } else {
      None
    }
  }
  /// If the union variant matches, return a reference to the NewGameResponsePayloadT.
  pub fn as_new_game_response_payload(&self) -> Option<&NewGameResponsePayloadT> {
    if let Self::NewGameResponsePayload(v) = self { Some(v.as_ref()) } else { None }
  }
  /// If the union variant matches, return a mutable reference to the NewGameResponsePayloadT.
  pub fn as_new_game_response_payload_mut(&mut self) -> Option<&mut NewGameResponsePayloadT> {
    if let Self::NewGameResponsePayload(v) = self { Some(v.as_mut()) } else { None }
  }
  /// If the union variant matches, return the owned JoinGameResponsePayloadT, setting the union to NONE.
  pub fn take_join_game_response_payload(&mut self) -> Option<Box<JoinGameResponsePayloadT>> {
    if let Self::JoinGameResponsePayload(_) = self {
      let v = core::mem::replace(self, Self::NONE);
      if let Self::JoinGameResponsePayload(w) = v {
        Some(w)
      } else {
        unreachable!()
      }
    } else {
      None
    }
  }
  /// If the union variant matches, return a reference to the JoinGameResponsePayloadT.
  pub fn as_join_game_response_payload(&self) -> Option<&JoinGameResponsePayloadT> {
    if let Self::JoinGameResponsePayload(v) = self { Some(v.as_ref()) } else { None }
  }
  /// If the union variant matches, return a mutable reference to the JoinGameResponsePayloadT.
  pub fn as_join_game_response_payload_mut(&mut self) -> Option<&mut JoinGameResponsePayloadT> {
    if let Self::JoinGameResponsePayload(v) = self { Some(v.as_mut()) } else { None }
  }
  /// If the union variant matches, return the owned StatePayloadT, setting the union to NONE.
  pub fn take_state_payload(&mut self) -> Option<Box<StatePayloadT>> {
    if let Self::StatePayload(_) = self {
      let v = core::mem::replace(self, Self::NONE);
      if let Self::StatePayload(w) = v {
        Some(w)
      } else {
        unreachable!()
      }
    } else {
      None
    }
  }
  /// If the union variant matches, return a reference to the StatePayloadT.
  pub fn as_state_payload(&self) -> Option<&StatePayloadT> {
    if let Self::StatePayload(v) = self { Some(v.as_ref()) } else { None }
  }
  /// If the union variant matches, return a mutable reference to the StatePayloadT.
  pub fn as_state_payload_mut(&mut self) -> Option<&mut StatePayloadT> {
    if let Self::StatePayload(v) = self { Some(v.as_mut()) } else { None }
  }
}
pub enum NewGameResponsePayloadOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct NewGameResponsePayload<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for NewGameResponsePayload<'a> {
  type Inner = NewGameResponsePayload<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> NewGameResponsePayload<'a> {
  pub const VT_GAME_ID: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    NewGameResponsePayload { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args NewGameResponsePayloadArgs<'args>
  ) -> flatbuffers::WIPOffset<NewGameResponsePayload<'bldr>> {
    let mut builder = NewGameResponsePayloadBuilder::new(_fbb);
    if let Some(x) = args.game_id { builder.add_game_id(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> NewGameResponsePayloadT {
    let game_id = self.game_id().map(|x| {
      x.to_string()
    });
    NewGameResponsePayloadT {
      game_id,
    }
  }

  #[inline]
  pub fn game_id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NewGameResponsePayload::VT_GAME_ID, None)}
  }
}

impl flatbuffers::Verifiable for NewGameResponsePayload<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("game_id", Self::VT_GAME_ID, false)?
     .finish();
    Ok(())
  }
}
pub struct NewGameResponsePayloadArgs<'a> {
    pub game_id: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for NewGameResponsePayloadArgs<'a> {
  #[inline]
  fn default() -> Self {
    NewGameResponsePayloadArgs {
      game_id: None,
    }
  }
}

pub struct NewGameResponsePayloadBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> NewGameResponsePayloadBuilder<'a, 'b> {
  #[inline]
  pub fn add_game_id(&mut self, game_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NewGameResponsePayload::VT_GAME_ID, game_id);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> NewGameResponsePayloadBuilder<'a, 'b> {
    let start = _fbb.start_table();
    NewGameResponsePayloadBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<NewGameResponsePayload<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for NewGameResponsePayload<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("NewGameResponsePayload");
      ds.field("game_id", &self.game_id());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct NewGameResponsePayloadT {
  pub game_id: Option<String>,
}
impl Default for NewGameResponsePayloadT {
  fn default() -> Self {
    Self {
      game_id: None,
    }
  }
}
impl NewGameResponsePayloadT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<NewGameResponsePayload<'b>> {
    let game_id = self.game_id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    NewGameResponsePayload::create(_fbb, &NewGameResponsePayloadArgs{
      game_id,
    })
  }
}
pub enum JoinGameResponsePayloadOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct JoinGameResponsePayload<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for JoinGameResponsePayload<'a> {
  type Inner = JoinGameResponsePayload<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> JoinGameResponsePayload<'a> {
  pub const VT_GAME: flatbuffers::VOffsetT = 4;
  pub const VT_WS_PORT: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    JoinGameResponsePayload { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args JoinGameResponsePayloadArgs<'args>
  ) -> flatbuffers::WIPOffset<JoinGameResponsePayload<'bldr>> {
    let mut builder = JoinGameResponsePayloadBuilder::new(_fbb);
    if let Some(x) = args.game { builder.add_game(x); }
    builder.add_ws_port(args.ws_port);
    builder.finish()
  }

  pub fn unpack(&self) -> JoinGameResponsePayloadT {
    let game = self.game().map(|x| {
      Box::new(x.unpack())
    });
    let ws_port = self.ws_port();
    JoinGameResponsePayloadT {
      game,
      ws_port,
    }
  }

  #[inline]
  pub fn game(&self) -> Option<super::game::Game<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::game::Game>>(JoinGameResponsePayload::VT_GAME, None)}
  }
  #[inline]
  pub fn ws_port(&self) -> u16 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u16>(JoinGameResponsePayload::VT_WS_PORT, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for JoinGameResponsePayload<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::game::Game>>("game", Self::VT_GAME, false)?
     .visit_field::<u16>("ws_port", Self::VT_WS_PORT, false)?
     .finish();
    Ok(())
  }
}
pub struct JoinGameResponsePayloadArgs<'a> {
    pub game: Option<flatbuffers::WIPOffset<super::game::Game<'a>>>,
    pub ws_port: u16,
}
impl<'a> Default for JoinGameResponsePayloadArgs<'a> {
  #[inline]
  fn default() -> Self {
    JoinGameResponsePayloadArgs {
      game: None,
      ws_port: 0,
    }
  }
}

pub struct JoinGameResponsePayloadBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> JoinGameResponsePayloadBuilder<'a, 'b> {
  #[inline]
  pub fn add_game(&mut self, game: flatbuffers::WIPOffset<super::game::Game<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::game::Game>>(JoinGameResponsePayload::VT_GAME, game);
  }
  #[inline]
  pub fn add_ws_port(&mut self, ws_port: u16) {
    self.fbb_.push_slot::<u16>(JoinGameResponsePayload::VT_WS_PORT, ws_port, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> JoinGameResponsePayloadBuilder<'a, 'b> {
    let start = _fbb.start_table();
    JoinGameResponsePayloadBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<JoinGameResponsePayload<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for JoinGameResponsePayload<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("JoinGameResponsePayload");
      ds.field("game", &self.game());
      ds.field("ws_port", &self.ws_port());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct JoinGameResponsePayloadT {
  pub game: Option<Box<super::game::GameT>>,
  pub ws_port: u16,
}
impl Default for JoinGameResponsePayloadT {
  fn default() -> Self {
    Self {
      game: None,
      ws_port: 0,
    }
  }
}
impl JoinGameResponsePayloadT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<JoinGameResponsePayload<'b>> {
    let game = self.game.as_ref().map(|x|{
      x.pack(_fbb)
    });
    let ws_port = self.ws_port;
    JoinGameResponsePayload::create(_fbb, &JoinGameResponsePayloadArgs{
      game,
      ws_port,
    })
  }
}
pub enum StatePayloadOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct StatePayload<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for StatePayload<'a> {
  type Inner = StatePayload<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> StatePayload<'a> {
  pub const VT_CODE: flatbuffers::VOffsetT = 4;
  pub const VT_GAME_STATE: flatbuffers::VOffsetT = 6;
  pub const VT_CHAT: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    StatePayload { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args StatePayloadArgs<'args>
  ) -> flatbuffers::WIPOffset<StatePayload<'bldr>> {
    let mut builder = StatePayloadBuilder::new(_fbb);
    if let Some(x) = args.chat { builder.add_chat(x); }
    if let Some(x) = args.game_state { builder.add_game_state(x); }
    builder.add_code(args.code);
    builder.finish()
  }

  pub fn unpack(&self) -> StatePayloadT {
    let code = self.code();
    let game_state = self.game_state().map(|x| {
      Box::new(x.unpack())
    });
    let chat = self.chat().map(|x| {
      x.iter().map(|t| t.unpack()).collect()
    });
    StatePayloadT {
      code,
      game_state,
      chat,
    }
  }

  #[inline]
  pub fn code(&self) -> ResponseCode {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ResponseCode>(StatePayload::VT_CODE, Some(ResponseCode::OK)).unwrap()}
  }
  #[inline]
  pub fn game_state(&self) -> Option<super::gamestate::GameState<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::gamestate::GameState>>(StatePayload::VT_GAME_STATE, None)}
  }
  #[inline]
  pub fn chat(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<super::chat::ChatMessage<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<super::chat::ChatMessage>>>>(StatePayload::VT_CHAT, None)}
  }
}

impl flatbuffers::Verifiable for StatePayload<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<ResponseCode>("code", Self::VT_CODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::gamestate::GameState>>("game_state", Self::VT_GAME_STATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<super::chat::ChatMessage>>>>("chat", Self::VT_CHAT, false)?
     .finish();
    Ok(())
  }
}
pub struct StatePayloadArgs<'a> {
    pub code: ResponseCode,
    pub game_state: Option<flatbuffers::WIPOffset<super::gamestate::GameState<'a>>>,
    pub chat: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<super::chat::ChatMessage<'a>>>>>,
}
impl<'a> Default for StatePayloadArgs<'a> {
  #[inline]
  fn default() -> Self {
    StatePayloadArgs {
      code: ResponseCode::OK,
      game_state: None,
      chat: None,
    }
  }
}

pub struct StatePayloadBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> StatePayloadBuilder<'a, 'b> {
  #[inline]
  pub fn add_code(&mut self, code: ResponseCode) {
    self.fbb_.push_slot::<ResponseCode>(StatePayload::VT_CODE, code, ResponseCode::OK);
  }
  #[inline]
  pub fn add_game_state(&mut self, game_state: flatbuffers::WIPOffset<super::gamestate::GameState<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::gamestate::GameState>>(StatePayload::VT_GAME_STATE, game_state);
  }
  #[inline]
  pub fn add_chat(&mut self, chat: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<super::chat::ChatMessage<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StatePayload::VT_CHAT, chat);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> StatePayloadBuilder<'a, 'b> {
    let start = _fbb.start_table();
    StatePayloadBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<StatePayload<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for StatePayload<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("StatePayload");
      ds.field("code", &self.code());
      ds.field("game_state", &self.game_state());
      ds.field("chat", &self.chat());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct StatePayloadT {
  pub code: ResponseCode,
  pub game_state: Option<Box<super::gamestate::GameStateT>>,
  pub chat: Option<Vec<super::chat::ChatMessageT>>,
}
impl Default for StatePayloadT {
  fn default() -> Self {
    Self {
      code: ResponseCode::OK,
      game_state: None,
      chat: None,
    }
  }
}
impl StatePayloadT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<StatePayload<'b>> {
    let code = self.code;
    let game_state = self.game_state.as_ref().map(|x|{
      x.pack(_fbb)
    });
    let chat = self.chat.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|t| t.pack(_fbb)).collect();_fbb.create_vector(&w)
    });
    StatePayload::create(_fbb, &StatePayloadArgs{
      code,
      game_state,
      chat,
    })
  }
}
pub enum ServerMessageOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ServerMessage<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ServerMessage<'a> {
  type Inner = ServerMessage<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ServerMessage<'a> {
  pub const VT_TIMESTAMP: flatbuffers::VOffsetT = 4;
  pub const VT_PAYLOAD_TYPE: flatbuffers::VOffsetT = 6;
  pub const VT_PAYLOAD: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ServerMessage { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ServerMessageArgs
  ) -> flatbuffers::WIPOffset<ServerMessage<'bldr>> {
    let mut builder = ServerMessageBuilder::new(_fbb);
    builder.add_timestamp(args.timestamp);
    if let Some(x) = args.payload { builder.add_payload(x); }
    builder.add_payload_type(args.payload_type);
    builder.finish()
  }

  pub fn unpack(&self) -> ServerMessageT {
    let timestamp = self.timestamp();
    let payload = match self.payload_type() {
      ServerMessagePayload::NONE => ServerMessagePayloadT::NONE,
      ServerMessagePayload::NewGameResponsePayload => ServerMessagePayloadT::NewGameResponsePayload(Box::new(
        self.payload_as_new_game_response_payload()
            .expect("Invalid union table, expected `ServerMessagePayload::NewGameResponsePayload`.")
            .unpack()
      )),
      ServerMessagePayload::JoinGameResponsePayload => ServerMessagePayloadT::JoinGameResponsePayload(Box::new(
        self.payload_as_join_game_response_payload()
            .expect("Invalid union table, expected `ServerMessagePayload::JoinGameResponsePayload`.")
            .unpack()
      )),
      ServerMessagePayload::StatePayload => ServerMessagePayloadT::StatePayload(Box::new(
        self.payload_as_state_payload()
            .expect("Invalid union table, expected `ServerMessagePayload::StatePayload`.")
            .unpack()
      )),
      _ => ServerMessagePayloadT::NONE,
    };
    ServerMessageT {
      timestamp,
      payload,
    }
  }

  #[inline]
  pub fn timestamp(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(ServerMessage::VT_TIMESTAMP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn payload_type(&self) -> ServerMessagePayload {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ServerMessagePayload>(ServerMessage::VT_PAYLOAD_TYPE, Some(ServerMessagePayload::NONE)).unwrap()}
  }
  #[inline]
  pub fn payload(&self) -> Option<flatbuffers::Table<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(ServerMessage::VT_PAYLOAD, None)}
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn payload_as_new_game_response_payload(&self) -> Option<NewGameResponsePayload<'a>> {
    if self.payload_type() == ServerMessagePayload::NewGameResponsePayload {
      self.payload().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { NewGameResponsePayload::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn payload_as_join_game_response_payload(&self) -> Option<JoinGameResponsePayload<'a>> {
    if self.payload_type() == ServerMessagePayload::JoinGameResponsePayload {
      self.payload().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { JoinGameResponsePayload::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn payload_as_state_payload(&self) -> Option<StatePayload<'a>> {
    if self.payload_type() == ServerMessagePayload::StatePayload {
      self.payload().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { StatePayload::init_from_table(t) }
     })
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for ServerMessage<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("timestamp", Self::VT_TIMESTAMP, false)?
     .visit_union::<ServerMessagePayload, _>("payload_type", Self::VT_PAYLOAD_TYPE, "payload", Self::VT_PAYLOAD, false, |key, v, pos| {
        match key {
          ServerMessagePayload::NewGameResponsePayload => v.verify_union_variant::<flatbuffers::ForwardsUOffset<NewGameResponsePayload>>("ServerMessagePayload::NewGameResponsePayload", pos),
          ServerMessagePayload::JoinGameResponsePayload => v.verify_union_variant::<flatbuffers::ForwardsUOffset<JoinGameResponsePayload>>("ServerMessagePayload::JoinGameResponsePayload", pos),
          ServerMessagePayload::StatePayload => v.verify_union_variant::<flatbuffers::ForwardsUOffset<StatePayload>>("ServerMessagePayload::StatePayload", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct ServerMessageArgs {
    pub timestamp: u64,
    pub payload_type: ServerMessagePayload,
    pub payload: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for ServerMessageArgs {
  #[inline]
  fn default() -> Self {
    ServerMessageArgs {
      timestamp: 0,
      payload_type: ServerMessagePayload::NONE,
      payload: None,
    }
  }
}

pub struct ServerMessageBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ServerMessageBuilder<'a, 'b> {
  #[inline]
  pub fn add_timestamp(&mut self, timestamp: u64) {
    self.fbb_.push_slot::<u64>(ServerMessage::VT_TIMESTAMP, timestamp, 0);
  }
  #[inline]
  pub fn add_payload_type(&mut self, payload_type: ServerMessagePayload) {
    self.fbb_.push_slot::<ServerMessagePayload>(ServerMessage::VT_PAYLOAD_TYPE, payload_type, ServerMessagePayload::NONE);
  }
  #[inline]
  pub fn add_payload(&mut self, payload: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ServerMessage::VT_PAYLOAD, payload);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ServerMessageBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ServerMessageBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ServerMessage<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ServerMessage<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ServerMessage");
      ds.field("timestamp", &self.timestamp());
      ds.field("payload_type", &self.payload_type());
      match self.payload_type() {
        ServerMessagePayload::NewGameResponsePayload => {
          if let Some(x) = self.payload_as_new_game_response_payload() {
            ds.field("payload", &x)
          } else {
            ds.field("payload", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ServerMessagePayload::JoinGameResponsePayload => {
          if let Some(x) = self.payload_as_join_game_response_payload() {
            ds.field("payload", &x)
          } else {
            ds.field("payload", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        ServerMessagePayload::StatePayload => {
          if let Some(x) = self.payload_as_state_payload() {
            ds.field("payload", &x)
          } else {
            ds.field("payload", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("payload", &x)
        },
      };
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ServerMessageT {
  pub timestamp: u64,
  pub payload: ServerMessagePayloadT,
}
impl Default for ServerMessageT {
  fn default() -> Self {
    Self {
      timestamp: 0,
      payload: ServerMessagePayloadT::NONE,
    }
  }
}
impl ServerMessageT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<ServerMessage<'b>> {
    let timestamp = self.timestamp;
    let payload_type = self.payload.server_message_payload_type();
    let payload = self.payload.pack(_fbb);
    ServerMessage::create(_fbb, &ServerMessageArgs{
      timestamp,
      payload_type,
      payload,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `ServerMessage`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_server_message_unchecked`.
pub fn root_as_server_message(buf: &[u8]) -> Result<ServerMessage, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<ServerMessage>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `ServerMessage` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_server_message_unchecked`.
pub fn size_prefixed_root_as_server_message(buf: &[u8]) -> Result<ServerMessage, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<ServerMessage>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `ServerMessage` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_server_message_unchecked`.
pub fn root_as_server_message_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ServerMessage<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<ServerMessage<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `ServerMessage` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_server_message_unchecked`.
pub fn size_prefixed_root_as_server_message_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ServerMessage<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<ServerMessage<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a ServerMessage and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `ServerMessage`.
pub unsafe fn root_as_server_message_unchecked(buf: &[u8]) -> ServerMessage {
  flatbuffers::root_unchecked::<ServerMessage>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed ServerMessage and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `ServerMessage`.
pub unsafe fn size_prefixed_root_as_server_message_unchecked(buf: &[u8]) -> ServerMessage {
  flatbuffers::size_prefixed_root_unchecked::<ServerMessage>(buf)
}
#[inline]
pub fn finish_server_message_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<ServerMessage<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_server_message_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<ServerMessage<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod Servermessages

